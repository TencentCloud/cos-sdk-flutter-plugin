// Autogenerated from Pigeon (v4.2.14), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package com.tencent.cos.flutter.plugin;

import android.util.Log;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import io.flutter.plugin.common.BasicMessageChannel;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.MessageCodec;
import io.flutter.plugin.common.StandardMessageCodec;
import java.io.ByteArrayOutputStream;
import java.nio.ByteBuffer;
import java.util.Arrays;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Map;
import java.util.HashMap;

/** Generated class from Pigeon. */
@SuppressWarnings({"unused", "unchecked", "CodeBlock2Expr", "RedundantSuppression"})
public class Pigeon {

  /** 日志级别枚举 */
  public enum LogLevel {
    VERBOSE(0),
    DEBUG(1),
    INFO(2),
    WARN(3),
    ERROR(4);

    private final int index;
    private LogLevel(final int index) {
      this.index = index;
    }
  }

  public enum LogCategory {
    PROCESS(0),
    RESULT(1),
    NETWORK(2),
    PROBE(3),
    ERROR(4);

    private final int index;
    private LogCategory(final int index) {
      this.index = index;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class CosXmlServiceConfig {
    private @Nullable String region;
    public @Nullable String getRegion() { return region; }
    public void setRegion(@Nullable String setterArg) {
      this.region = setterArg;
    }

    private @Nullable Long connectionTimeout;
    public @Nullable Long getConnectionTimeout() { return connectionTimeout; }
    public void setConnectionTimeout(@Nullable Long setterArg) {
      this.connectionTimeout = setterArg;
    }

    private @Nullable Long socketTimeout;
    public @Nullable Long getSocketTimeout() { return socketTimeout; }
    public void setSocketTimeout(@Nullable Long setterArg) {
      this.socketTimeout = setterArg;
    }

    private @Nullable Boolean isHttps;
    public @Nullable Boolean getIsHttps() { return isHttps; }
    public void setIsHttps(@Nullable Boolean setterArg) {
      this.isHttps = setterArg;
    }

    private @Nullable String host;
    public @Nullable String getHost() { return host; }
    public void setHost(@Nullable String setterArg) {
      this.host = setterArg;
    }

    private @Nullable String hostFormat;
    public @Nullable String getHostFormat() { return hostFormat; }
    public void setHostFormat(@Nullable String setterArg) {
      this.hostFormat = setterArg;
    }

    private @Nullable Long port;
    public @Nullable Long getPort() { return port; }
    public void setPort(@Nullable Long setterArg) {
      this.port = setterArg;
    }

    private @Nullable Boolean isDebuggable;
    public @Nullable Boolean getIsDebuggable() { return isDebuggable; }
    public void setIsDebuggable(@Nullable Boolean setterArg) {
      this.isDebuggable = setterArg;
    }

    private @Nullable Boolean signInUrl;
    public @Nullable Boolean getSignInUrl() { return signInUrl; }
    public void setSignInUrl(@Nullable Boolean setterArg) {
      this.signInUrl = setterArg;
    }

    private @Nullable String userAgent;
    public @Nullable String getUserAgent() { return userAgent; }
    public void setUserAgent(@Nullable String setterArg) {
      this.userAgent = setterArg;
    }

    private @Nullable Boolean dnsCache;
    public @Nullable Boolean getDnsCache() { return dnsCache; }
    public void setDnsCache(@Nullable Boolean setterArg) {
      this.dnsCache = setterArg;
    }

    private @Nullable Boolean accelerate;
    public @Nullable Boolean getAccelerate() { return accelerate; }
    public void setAccelerate(@Nullable Boolean setterArg) {
      this.accelerate = setterArg;
    }

    private @Nullable Boolean domainSwitch;
    public @Nullable Boolean getDomainSwitch() { return domainSwitch; }
    public void setDomainSwitch(@Nullable Boolean setterArg) {
      this.domainSwitch = setterArg;
    }

    private @Nullable Map<String, String> customHeaders;
    public @Nullable Map<String, String> getCustomHeaders() { return customHeaders; }
    public void setCustomHeaders(@Nullable Map<String, String> setterArg) {
      this.customHeaders = setterArg;
    }

    private @Nullable List<String> noSignHeaders;
    public @Nullable List<String> getNoSignHeaders() { return noSignHeaders; }
    public void setNoSignHeaders(@Nullable List<String> setterArg) {
      this.noSignHeaders = setterArg;
    }

    public static final class Builder {
      private @Nullable String region;
      public @NonNull Builder setRegion(@Nullable String setterArg) {
        this.region = setterArg;
        return this;
      }
      private @Nullable Long connectionTimeout;
      public @NonNull Builder setConnectionTimeout(@Nullable Long setterArg) {
        this.connectionTimeout = setterArg;
        return this;
      }
      private @Nullable Long socketTimeout;
      public @NonNull Builder setSocketTimeout(@Nullable Long setterArg) {
        this.socketTimeout = setterArg;
        return this;
      }
      private @Nullable Boolean isHttps;
      public @NonNull Builder setIsHttps(@Nullable Boolean setterArg) {
        this.isHttps = setterArg;
        return this;
      }
      private @Nullable String host;
      public @NonNull Builder setHost(@Nullable String setterArg) {
        this.host = setterArg;
        return this;
      }
      private @Nullable String hostFormat;
      public @NonNull Builder setHostFormat(@Nullable String setterArg) {
        this.hostFormat = setterArg;
        return this;
      }
      private @Nullable Long port;
      public @NonNull Builder setPort(@Nullable Long setterArg) {
        this.port = setterArg;
        return this;
      }
      private @Nullable Boolean isDebuggable;
      public @NonNull Builder setIsDebuggable(@Nullable Boolean setterArg) {
        this.isDebuggable = setterArg;
        return this;
      }
      private @Nullable Boolean signInUrl;
      public @NonNull Builder setSignInUrl(@Nullable Boolean setterArg) {
        this.signInUrl = setterArg;
        return this;
      }
      private @Nullable String userAgent;
      public @NonNull Builder setUserAgent(@Nullable String setterArg) {
        this.userAgent = setterArg;
        return this;
      }
      private @Nullable Boolean dnsCache;
      public @NonNull Builder setDnsCache(@Nullable Boolean setterArg) {
        this.dnsCache = setterArg;
        return this;
      }
      private @Nullable Boolean accelerate;
      public @NonNull Builder setAccelerate(@Nullable Boolean setterArg) {
        this.accelerate = setterArg;
        return this;
      }
      private @Nullable Boolean domainSwitch;
      public @NonNull Builder setDomainSwitch(@Nullable Boolean setterArg) {
        this.domainSwitch = setterArg;
        return this;
      }
      private @Nullable Map<String, String> customHeaders;
      public @NonNull Builder setCustomHeaders(@Nullable Map<String, String> setterArg) {
        this.customHeaders = setterArg;
        return this;
      }
      private @Nullable List<String> noSignHeaders;
      public @NonNull Builder setNoSignHeaders(@Nullable List<String> setterArg) {
        this.noSignHeaders = setterArg;
        return this;
      }
      public @NonNull CosXmlServiceConfig build() {
        CosXmlServiceConfig pigeonReturn = new CosXmlServiceConfig();
        pigeonReturn.setRegion(region);
        pigeonReturn.setConnectionTimeout(connectionTimeout);
        pigeonReturn.setSocketTimeout(socketTimeout);
        pigeonReturn.setIsHttps(isHttps);
        pigeonReturn.setHost(host);
        pigeonReturn.setHostFormat(hostFormat);
        pigeonReturn.setPort(port);
        pigeonReturn.setIsDebuggable(isDebuggable);
        pigeonReturn.setSignInUrl(signInUrl);
        pigeonReturn.setUserAgent(userAgent);
        pigeonReturn.setDnsCache(dnsCache);
        pigeonReturn.setAccelerate(accelerate);
        pigeonReturn.setDomainSwitch(domainSwitch);
        pigeonReturn.setCustomHeaders(customHeaders);
        pigeonReturn.setNoSignHeaders(noSignHeaders);
        return pigeonReturn;
      }
    }
    @NonNull ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(15);
      toListResult.add(region);
      toListResult.add(connectionTimeout);
      toListResult.add(socketTimeout);
      toListResult.add(isHttps);
      toListResult.add(host);
      toListResult.add(hostFormat);
      toListResult.add(port);
      toListResult.add(isDebuggable);
      toListResult.add(signInUrl);
      toListResult.add(userAgent);
      toListResult.add(dnsCache);
      toListResult.add(accelerate);
      toListResult.add(domainSwitch);
      toListResult.add(customHeaders);
      toListResult.add(noSignHeaders);
      return toListResult;
    }
    static @NonNull CosXmlServiceConfig fromList(@NonNull ArrayList<Object> list) {
      CosXmlServiceConfig pigeonResult = new CosXmlServiceConfig();
      Object region = list.get(0);
      pigeonResult.setRegion((String)region);
      Object connectionTimeout = list.get(1);
      pigeonResult.setConnectionTimeout((connectionTimeout == null) ? null : ((connectionTimeout instanceof Integer) ? (Integer)connectionTimeout : (Long)connectionTimeout));
      Object socketTimeout = list.get(2);
      pigeonResult.setSocketTimeout((socketTimeout == null) ? null : ((socketTimeout instanceof Integer) ? (Integer)socketTimeout : (Long)socketTimeout));
      Object isHttps = list.get(3);
      pigeonResult.setIsHttps((Boolean)isHttps);
      Object host = list.get(4);
      pigeonResult.setHost((String)host);
      Object hostFormat = list.get(5);
      pigeonResult.setHostFormat((String)hostFormat);
      Object port = list.get(6);
      pigeonResult.setPort((port == null) ? null : ((port instanceof Integer) ? (Integer)port : (Long)port));
      Object isDebuggable = list.get(7);
      pigeonResult.setIsDebuggable((Boolean)isDebuggable);
      Object signInUrl = list.get(8);
      pigeonResult.setSignInUrl((Boolean)signInUrl);
      Object userAgent = list.get(9);
      pigeonResult.setUserAgent((String)userAgent);
      Object dnsCache = list.get(10);
      pigeonResult.setDnsCache((Boolean)dnsCache);
      Object accelerate = list.get(11);
      pigeonResult.setAccelerate((Boolean)accelerate);
      Object domainSwitch = list.get(12);
      pigeonResult.setDomainSwitch((Boolean)domainSwitch);
      Object customHeaders = list.get(13);
      pigeonResult.setCustomHeaders((Map<String, String>)customHeaders);
      Object noSignHeaders = list.get(14);
      pigeonResult.setNoSignHeaders((List<String>)noSignHeaders);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class TransferConfig {
    private @Nullable Boolean forceSimpleUpload;
    public @Nullable Boolean getForceSimpleUpload() { return forceSimpleUpload; }
    public void setForceSimpleUpload(@Nullable Boolean setterArg) {
      this.forceSimpleUpload = setterArg;
    }

    private @Nullable Boolean enableVerification;
    public @Nullable Boolean getEnableVerification() { return enableVerification; }
    public void setEnableVerification(@Nullable Boolean setterArg) {
      this.enableVerification = setterArg;
    }

    private @Nullable Long divisionForUpload;
    public @Nullable Long getDivisionForUpload() { return divisionForUpload; }
    public void setDivisionForUpload(@Nullable Long setterArg) {
      this.divisionForUpload = setterArg;
    }

    private @Nullable Long sliceSizeForUpload;
    public @Nullable Long getSliceSizeForUpload() { return sliceSizeForUpload; }
    public void setSliceSizeForUpload(@Nullable Long setterArg) {
      this.sliceSizeForUpload = setterArg;
    }

    public static final class Builder {
      private @Nullable Boolean forceSimpleUpload;
      public @NonNull Builder setForceSimpleUpload(@Nullable Boolean setterArg) {
        this.forceSimpleUpload = setterArg;
        return this;
      }
      private @Nullable Boolean enableVerification;
      public @NonNull Builder setEnableVerification(@Nullable Boolean setterArg) {
        this.enableVerification = setterArg;
        return this;
      }
      private @Nullable Long divisionForUpload;
      public @NonNull Builder setDivisionForUpload(@Nullable Long setterArg) {
        this.divisionForUpload = setterArg;
        return this;
      }
      private @Nullable Long sliceSizeForUpload;
      public @NonNull Builder setSliceSizeForUpload(@Nullable Long setterArg) {
        this.sliceSizeForUpload = setterArg;
        return this;
      }
      public @NonNull TransferConfig build() {
        TransferConfig pigeonReturn = new TransferConfig();
        pigeonReturn.setForceSimpleUpload(forceSimpleUpload);
        pigeonReturn.setEnableVerification(enableVerification);
        pigeonReturn.setDivisionForUpload(divisionForUpload);
        pigeonReturn.setSliceSizeForUpload(sliceSizeForUpload);
        return pigeonReturn;
      }
    }
    @NonNull ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(4);
      toListResult.add(forceSimpleUpload);
      toListResult.add(enableVerification);
      toListResult.add(divisionForUpload);
      toListResult.add(sliceSizeForUpload);
      return toListResult;
    }
    static @NonNull TransferConfig fromList(@NonNull ArrayList<Object> list) {
      TransferConfig pigeonResult = new TransferConfig();
      Object forceSimpleUpload = list.get(0);
      pigeonResult.setForceSimpleUpload((Boolean)forceSimpleUpload);
      Object enableVerification = list.get(1);
      pigeonResult.setEnableVerification((Boolean)enableVerification);
      Object divisionForUpload = list.get(2);
      pigeonResult.setDivisionForUpload((divisionForUpload == null) ? null : ((divisionForUpload instanceof Integer) ? (Integer)divisionForUpload : (Long)divisionForUpload));
      Object sliceSizeForUpload = list.get(3);
      pigeonResult.setSliceSizeForUpload((sliceSizeForUpload == null) ? null : ((sliceSizeForUpload instanceof Integer) ? (Integer)sliceSizeForUpload : (Long)sliceSizeForUpload));
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class STSCredentialScope {
    private @NonNull String action;
    public @NonNull String getAction() { return action; }
    public void setAction(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"action\" is null.");
      }
      this.action = setterArg;
    }

    private @NonNull String region;
    public @NonNull String getRegion() { return region; }
    public void setRegion(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"region\" is null.");
      }
      this.region = setterArg;
    }

    private @Nullable String bucket;
    public @Nullable String getBucket() { return bucket; }
    public void setBucket(@Nullable String setterArg) {
      this.bucket = setterArg;
    }

    private @Nullable String prefix;
    public @Nullable String getPrefix() { return prefix; }
    public void setPrefix(@Nullable String setterArg) {
      this.prefix = setterArg;
    }

    /**Constructor is private to enforce null safety; use Builder. */
    private STSCredentialScope() {}
    public static final class Builder {
      private @Nullable String action;
      public @NonNull Builder setAction(@NonNull String setterArg) {
        this.action = setterArg;
        return this;
      }
      private @Nullable String region;
      public @NonNull Builder setRegion(@NonNull String setterArg) {
        this.region = setterArg;
        return this;
      }
      private @Nullable String bucket;
      public @NonNull Builder setBucket(@Nullable String setterArg) {
        this.bucket = setterArg;
        return this;
      }
      private @Nullable String prefix;
      public @NonNull Builder setPrefix(@Nullable String setterArg) {
        this.prefix = setterArg;
        return this;
      }
      public @NonNull STSCredentialScope build() {
        STSCredentialScope pigeonReturn = new STSCredentialScope();
        pigeonReturn.setAction(action);
        pigeonReturn.setRegion(region);
        pigeonReturn.setBucket(bucket);
        pigeonReturn.setPrefix(prefix);
        return pigeonReturn;
      }
    }
    @NonNull ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(4);
      toListResult.add(action);
      toListResult.add(region);
      toListResult.add(bucket);
      toListResult.add(prefix);
      return toListResult;
    }
    static @NonNull STSCredentialScope fromList(@NonNull ArrayList<Object> list) {
      STSCredentialScope pigeonResult = new STSCredentialScope();
      Object action = list.get(0);
      pigeonResult.setAction((String)action);
      Object region = list.get(1);
      pigeonResult.setRegion((String)region);
      Object bucket = list.get(2);
      pigeonResult.setBucket((String)bucket);
      Object prefix = list.get(3);
      pigeonResult.setPrefix((String)prefix);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class SessionQCloudCredentials {
    private @NonNull String secretId;
    public @NonNull String getSecretId() { return secretId; }
    public void setSecretId(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"secretId\" is null.");
      }
      this.secretId = setterArg;
    }

    private @NonNull String secretKey;
    public @NonNull String getSecretKey() { return secretKey; }
    public void setSecretKey(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"secretKey\" is null.");
      }
      this.secretKey = setterArg;
    }

    private @NonNull String token;
    public @NonNull String getToken() { return token; }
    public void setToken(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"token\" is null.");
      }
      this.token = setterArg;
    }

    private @Nullable Long startTime;
    public @Nullable Long getStartTime() { return startTime; }
    public void setStartTime(@Nullable Long setterArg) {
      this.startTime = setterArg;
    }

    private @NonNull Long expiredTime;
    public @NonNull Long getExpiredTime() { return expiredTime; }
    public void setExpiredTime(@NonNull Long setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"expiredTime\" is null.");
      }
      this.expiredTime = setterArg;
    }

    /**Constructor is private to enforce null safety; use Builder. */
    private SessionQCloudCredentials() {}
    public static final class Builder {
      private @Nullable String secretId;
      public @NonNull Builder setSecretId(@NonNull String setterArg) {
        this.secretId = setterArg;
        return this;
      }
      private @Nullable String secretKey;
      public @NonNull Builder setSecretKey(@NonNull String setterArg) {
        this.secretKey = setterArg;
        return this;
      }
      private @Nullable String token;
      public @NonNull Builder setToken(@NonNull String setterArg) {
        this.token = setterArg;
        return this;
      }
      private @Nullable Long startTime;
      public @NonNull Builder setStartTime(@Nullable Long setterArg) {
        this.startTime = setterArg;
        return this;
      }
      private @Nullable Long expiredTime;
      public @NonNull Builder setExpiredTime(@NonNull Long setterArg) {
        this.expiredTime = setterArg;
        return this;
      }
      public @NonNull SessionQCloudCredentials build() {
        SessionQCloudCredentials pigeonReturn = new SessionQCloudCredentials();
        pigeonReturn.setSecretId(secretId);
        pigeonReturn.setSecretKey(secretKey);
        pigeonReturn.setToken(token);
        pigeonReturn.setStartTime(startTime);
        pigeonReturn.setExpiredTime(expiredTime);
        return pigeonReturn;
      }
    }
    @NonNull ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(5);
      toListResult.add(secretId);
      toListResult.add(secretKey);
      toListResult.add(token);
      toListResult.add(startTime);
      toListResult.add(expiredTime);
      return toListResult;
    }
    static @NonNull SessionQCloudCredentials fromList(@NonNull ArrayList<Object> list) {
      SessionQCloudCredentials pigeonResult = new SessionQCloudCredentials();
      Object secretId = list.get(0);
      pigeonResult.setSecretId((String)secretId);
      Object secretKey = list.get(1);
      pigeonResult.setSecretKey((String)secretKey);
      Object token = list.get(2);
      pigeonResult.setToken((String)token);
      Object startTime = list.get(3);
      pigeonResult.setStartTime((startTime == null) ? null : ((startTime instanceof Integer) ? (Integer)startTime : (Long)startTime));
      Object expiredTime = list.get(4);
      pigeonResult.setExpiredTime((expiredTime == null) ? null : ((expiredTime instanceof Integer) ? (Integer)expiredTime : (Long)expiredTime));
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class CosXmlResult {
    private @Nullable String eTag;
    public @Nullable String getETag() { return eTag; }
    public void setETag(@Nullable String setterArg) {
      this.eTag = setterArg;
    }

    private @Nullable String accessUrl;
    public @Nullable String getAccessUrl() { return accessUrl; }
    public void setAccessUrl(@Nullable String setterArg) {
      this.accessUrl = setterArg;
    }

    private @Nullable CallbackResult callbackResult;
    public @Nullable CallbackResult getCallbackResult() { return callbackResult; }
    public void setCallbackResult(@Nullable CallbackResult setterArg) {
      this.callbackResult = setterArg;
    }

    public static final class Builder {
      private @Nullable String eTag;
      public @NonNull Builder setETag(@Nullable String setterArg) {
        this.eTag = setterArg;
        return this;
      }
      private @Nullable String accessUrl;
      public @NonNull Builder setAccessUrl(@Nullable String setterArg) {
        this.accessUrl = setterArg;
        return this;
      }
      private @Nullable CallbackResult callbackResult;
      public @NonNull Builder setCallbackResult(@Nullable CallbackResult setterArg) {
        this.callbackResult = setterArg;
        return this;
      }
      public @NonNull CosXmlResult build() {
        CosXmlResult pigeonReturn = new CosXmlResult();
        pigeonReturn.setETag(eTag);
        pigeonReturn.setAccessUrl(accessUrl);
        pigeonReturn.setCallbackResult(callbackResult);
        return pigeonReturn;
      }
    }
    @NonNull ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(3);
      toListResult.add(eTag);
      toListResult.add(accessUrl);
      toListResult.add((callbackResult == null) ? null : callbackResult.toList());
      return toListResult;
    }
    static @NonNull CosXmlResult fromList(@NonNull ArrayList<Object> list) {
      CosXmlResult pigeonResult = new CosXmlResult();
      Object eTag = list.get(0);
      pigeonResult.setETag((String)eTag);
      Object accessUrl = list.get(1);
      pigeonResult.setAccessUrl((String)accessUrl);
      Object callbackResult = list.get(2);
      pigeonResult.setCallbackResult((callbackResult == null) ? null : CallbackResult.fromList((ArrayList<Object>)callbackResult));
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class CallbackResult {
    /** Callback 是否成功。枚举值，支持 200、203。200表示上传成功、回调成功；203表示上传成功，回调失败 */
    private @NonNull Long status;
    public @NonNull Long getStatus() { return status; }
    public void setStatus(@NonNull Long setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"status\" is null.");
      }
      this.status = setterArg;
    }

    /** Status为200时，说明上传成功、回调成功，返回 CallbackBody */
    private @Nullable String callbackBody;
    public @Nullable String getCallbackBody() { return callbackBody; }
    public void setCallbackBody(@Nullable String setterArg) {
      this.callbackBody = setterArg;
    }

    /** Status为203时，说明Callback，返回 Error，说明回调失败信息 */
    private @Nullable CallbackResultError error;
    public @Nullable CallbackResultError getError() { return error; }
    public void setError(@Nullable CallbackResultError setterArg) {
      this.error = setterArg;
    }

    /**Constructor is private to enforce null safety; use Builder. */
    private CallbackResult() {}
    public static final class Builder {
      private @Nullable Long status;
      public @NonNull Builder setStatus(@NonNull Long setterArg) {
        this.status = setterArg;
        return this;
      }
      private @Nullable String callbackBody;
      public @NonNull Builder setCallbackBody(@Nullable String setterArg) {
        this.callbackBody = setterArg;
        return this;
      }
      private @Nullable CallbackResultError error;
      public @NonNull Builder setError(@Nullable CallbackResultError setterArg) {
        this.error = setterArg;
        return this;
      }
      public @NonNull CallbackResult build() {
        CallbackResult pigeonReturn = new CallbackResult();
        pigeonReturn.setStatus(status);
        pigeonReturn.setCallbackBody(callbackBody);
        pigeonReturn.setError(error);
        return pigeonReturn;
      }
    }
    @NonNull ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(3);
      toListResult.add(status);
      toListResult.add(callbackBody);
      toListResult.add((error == null) ? null : error.toList());
      return toListResult;
    }
    static @NonNull CallbackResult fromList(@NonNull ArrayList<Object> list) {
      CallbackResult pigeonResult = new CallbackResult();
      Object status = list.get(0);
      pigeonResult.setStatus((status == null) ? null : ((status instanceof Integer) ? (Integer)status : (Long)status));
      Object callbackBody = list.get(1);
      pigeonResult.setCallbackBody((String)callbackBody);
      Object error = list.get(2);
      pigeonResult.setError((error == null) ? null : CallbackResultError.fromList((ArrayList<Object>)error));
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class CallbackResultError {
    /** 回调失败信息的错误码，例如CallbackFailed */
    private @Nullable String code;
    public @Nullable String getCode() { return code; }
    public void setCode(@Nullable String setterArg) {
      this.code = setterArg;
    }

    /** Callback 失败的错误信息 */
    private @Nullable String message;
    public @Nullable String getMessage() { return message; }
    public void setMessage(@Nullable String setterArg) {
      this.message = setterArg;
    }

    public static final class Builder {
      private @Nullable String code;
      public @NonNull Builder setCode(@Nullable String setterArg) {
        this.code = setterArg;
        return this;
      }
      private @Nullable String message;
      public @NonNull Builder setMessage(@Nullable String setterArg) {
        this.message = setterArg;
        return this;
      }
      public @NonNull CallbackResultError build() {
        CallbackResultError pigeonReturn = new CallbackResultError();
        pigeonReturn.setCode(code);
        pigeonReturn.setMessage(message);
        return pigeonReturn;
      }
    }
    @NonNull ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(2);
      toListResult.add(code);
      toListResult.add(message);
      return toListResult;
    }
    static @NonNull CallbackResultError fromList(@NonNull ArrayList<Object> list) {
      CallbackResultError pigeonResult = new CallbackResultError();
      Object code = list.get(0);
      pigeonResult.setCode((String)code);
      Object message = list.get(1);
      pigeonResult.setMessage((String)message);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class CosXmlClientException {
    private @NonNull Long errorCode;
    public @NonNull Long getErrorCode() { return errorCode; }
    public void setErrorCode(@NonNull Long setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"errorCode\" is null.");
      }
      this.errorCode = setterArg;
    }

    private @Nullable String message;
    public @Nullable String getMessage() { return message; }
    public void setMessage(@Nullable String setterArg) {
      this.message = setterArg;
    }

    private @Nullable String details;
    public @Nullable String getDetails() { return details; }
    public void setDetails(@Nullable String setterArg) {
      this.details = setterArg;
    }

    /**Constructor is private to enforce null safety; use Builder. */
    private CosXmlClientException() {}
    public static final class Builder {
      private @Nullable Long errorCode;
      public @NonNull Builder setErrorCode(@NonNull Long setterArg) {
        this.errorCode = setterArg;
        return this;
      }
      private @Nullable String message;
      public @NonNull Builder setMessage(@Nullable String setterArg) {
        this.message = setterArg;
        return this;
      }
      private @Nullable String details;
      public @NonNull Builder setDetails(@Nullable String setterArg) {
        this.details = setterArg;
        return this;
      }
      public @NonNull CosXmlClientException build() {
        CosXmlClientException pigeonReturn = new CosXmlClientException();
        pigeonReturn.setErrorCode(errorCode);
        pigeonReturn.setMessage(message);
        pigeonReturn.setDetails(details);
        return pigeonReturn;
      }
    }
    @NonNull ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(3);
      toListResult.add(errorCode);
      toListResult.add(message);
      toListResult.add(details);
      return toListResult;
    }
    static @NonNull CosXmlClientException fromList(@NonNull ArrayList<Object> list) {
      CosXmlClientException pigeonResult = new CosXmlClientException();
      Object errorCode = list.get(0);
      pigeonResult.setErrorCode((errorCode == null) ? null : ((errorCode instanceof Integer) ? (Integer)errorCode : (Long)errorCode));
      Object message = list.get(1);
      pigeonResult.setMessage((String)message);
      Object details = list.get(2);
      pigeonResult.setDetails((String)details);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class CosXmlServiceException {
    private @NonNull Long statusCode;
    public @NonNull Long getStatusCode() { return statusCode; }
    public void setStatusCode(@NonNull Long setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"statusCode\" is null.");
      }
      this.statusCode = setterArg;
    }

    private @Nullable String httpMsg;
    public @Nullable String getHttpMsg() { return httpMsg; }
    public void setHttpMsg(@Nullable String setterArg) {
      this.httpMsg = setterArg;
    }

    private @Nullable String requestId;
    public @Nullable String getRequestId() { return requestId; }
    public void setRequestId(@Nullable String setterArg) {
      this.requestId = setterArg;
    }

    private @Nullable String errorCode;
    public @Nullable String getErrorCode() { return errorCode; }
    public void setErrorCode(@Nullable String setterArg) {
      this.errorCode = setterArg;
    }

    private @Nullable String errorMessage;
    public @Nullable String getErrorMessage() { return errorMessage; }
    public void setErrorMessage(@Nullable String setterArg) {
      this.errorMessage = setterArg;
    }

    private @Nullable String serviceName;
    public @Nullable String getServiceName() { return serviceName; }
    public void setServiceName(@Nullable String setterArg) {
      this.serviceName = setterArg;
    }

    private @Nullable String details;
    public @Nullable String getDetails() { return details; }
    public void setDetails(@Nullable String setterArg) {
      this.details = setterArg;
    }

    /**Constructor is private to enforce null safety; use Builder. */
    private CosXmlServiceException() {}
    public static final class Builder {
      private @Nullable Long statusCode;
      public @NonNull Builder setStatusCode(@NonNull Long setterArg) {
        this.statusCode = setterArg;
        return this;
      }
      private @Nullable String httpMsg;
      public @NonNull Builder setHttpMsg(@Nullable String setterArg) {
        this.httpMsg = setterArg;
        return this;
      }
      private @Nullable String requestId;
      public @NonNull Builder setRequestId(@Nullable String setterArg) {
        this.requestId = setterArg;
        return this;
      }
      private @Nullable String errorCode;
      public @NonNull Builder setErrorCode(@Nullable String setterArg) {
        this.errorCode = setterArg;
        return this;
      }
      private @Nullable String errorMessage;
      public @NonNull Builder setErrorMessage(@Nullable String setterArg) {
        this.errorMessage = setterArg;
        return this;
      }
      private @Nullable String serviceName;
      public @NonNull Builder setServiceName(@Nullable String setterArg) {
        this.serviceName = setterArg;
        return this;
      }
      private @Nullable String details;
      public @NonNull Builder setDetails(@Nullable String setterArg) {
        this.details = setterArg;
        return this;
      }
      public @NonNull CosXmlServiceException build() {
        CosXmlServiceException pigeonReturn = new CosXmlServiceException();
        pigeonReturn.setStatusCode(statusCode);
        pigeonReturn.setHttpMsg(httpMsg);
        pigeonReturn.setRequestId(requestId);
        pigeonReturn.setErrorCode(errorCode);
        pigeonReturn.setErrorMessage(errorMessage);
        pigeonReturn.setServiceName(serviceName);
        pigeonReturn.setDetails(details);
        return pigeonReturn;
      }
    }
    @NonNull ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(7);
      toListResult.add(statusCode);
      toListResult.add(httpMsg);
      toListResult.add(requestId);
      toListResult.add(errorCode);
      toListResult.add(errorMessage);
      toListResult.add(serviceName);
      toListResult.add(details);
      return toListResult;
    }
    static @NonNull CosXmlServiceException fromList(@NonNull ArrayList<Object> list) {
      CosXmlServiceException pigeonResult = new CosXmlServiceException();
      Object statusCode = list.get(0);
      pigeonResult.setStatusCode((statusCode == null) ? null : ((statusCode instanceof Integer) ? (Integer)statusCode : (Long)statusCode));
      Object httpMsg = list.get(1);
      pigeonResult.setHttpMsg((String)httpMsg);
      Object requestId = list.get(2);
      pigeonResult.setRequestId((String)requestId);
      Object errorCode = list.get(3);
      pigeonResult.setErrorCode((String)errorCode);
      Object errorMessage = list.get(4);
      pigeonResult.setErrorMessage((String)errorMessage);
      Object serviceName = list.get(5);
      pigeonResult.setServiceName((String)serviceName);
      Object details = list.get(6);
      pigeonResult.setDetails((String)details);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class Owner {
    /** 存储桶持有者的完整 ID */
    private @NonNull String id;
    public @NonNull String getId() { return id; }
    public void setId(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"id\" is null.");
      }
      this.id = setterArg;
    }

    /** 存储桶持有者的名字 */
    private @Nullable String disPlayName;
    public @Nullable String getDisPlayName() { return disPlayName; }
    public void setDisPlayName(@Nullable String setterArg) {
      this.disPlayName = setterArg;
    }

    /**Constructor is private to enforce null safety; use Builder. */
    private Owner() {}
    public static final class Builder {
      private @Nullable String id;
      public @NonNull Builder setId(@NonNull String setterArg) {
        this.id = setterArg;
        return this;
      }
      private @Nullable String disPlayName;
      public @NonNull Builder setDisPlayName(@Nullable String setterArg) {
        this.disPlayName = setterArg;
        return this;
      }
      public @NonNull Owner build() {
        Owner pigeonReturn = new Owner();
        pigeonReturn.setId(id);
        pigeonReturn.setDisPlayName(disPlayName);
        return pigeonReturn;
      }
    }
    @NonNull ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(2);
      toListResult.add(id);
      toListResult.add(disPlayName);
      return toListResult;
    }
    static @NonNull Owner fromList(@NonNull ArrayList<Object> list) {
      Owner pigeonResult = new Owner();
      Object id = list.get(0);
      pigeonResult.setId((String)id);
      Object disPlayName = list.get(1);
      pigeonResult.setDisPlayName((String)disPlayName);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class LogEntity {
    private @NonNull Long timestamp;
    public @NonNull Long getTimestamp() { return timestamp; }
    public void setTimestamp(@NonNull Long setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"timestamp\" is null.");
      }
      this.timestamp = setterArg;
    }

    private @NonNull LogLevel level;
    public @NonNull LogLevel getLevel() { return level; }
    public void setLevel(@NonNull LogLevel setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"level\" is null.");
      }
      this.level = setterArg;
    }

    private @NonNull LogCategory category;
    public @NonNull LogCategory getCategory() { return category; }
    public void setCategory(@NonNull LogCategory setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"category\" is null.");
      }
      this.category = setterArg;
    }

    private @NonNull String tag;
    public @NonNull String getTag() { return tag; }
    public void setTag(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"tag\" is null.");
      }
      this.tag = setterArg;
    }

    private @NonNull String message;
    public @NonNull String getMessage() { return message; }
    public void setMessage(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"message\" is null.");
      }
      this.message = setterArg;
    }

    private @NonNull String threadName;
    public @NonNull String getThreadName() { return threadName; }
    public void setThreadName(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"threadName\" is null.");
      }
      this.threadName = setterArg;
    }

    private @Nullable Map<String, String> extras;
    public @Nullable Map<String, String> getExtras() { return extras; }
    public void setExtras(@Nullable Map<String, String> setterArg) {
      this.extras = setterArg;
    }

    private @Nullable String throwable;
    public @Nullable String getThrowable() { return throwable; }
    public void setThrowable(@Nullable String setterArg) {
      this.throwable = setterArg;
    }

    /**Constructor is private to enforce null safety; use Builder. */
    private LogEntity() {}
    public static final class Builder {
      private @Nullable Long timestamp;
      public @NonNull Builder setTimestamp(@NonNull Long setterArg) {
        this.timestamp = setterArg;
        return this;
      }
      private @Nullable LogLevel level;
      public @NonNull Builder setLevel(@NonNull LogLevel setterArg) {
        this.level = setterArg;
        return this;
      }
      private @Nullable LogCategory category;
      public @NonNull Builder setCategory(@NonNull LogCategory setterArg) {
        this.category = setterArg;
        return this;
      }
      private @Nullable String tag;
      public @NonNull Builder setTag(@NonNull String setterArg) {
        this.tag = setterArg;
        return this;
      }
      private @Nullable String message;
      public @NonNull Builder setMessage(@NonNull String setterArg) {
        this.message = setterArg;
        return this;
      }
      private @Nullable String threadName;
      public @NonNull Builder setThreadName(@NonNull String setterArg) {
        this.threadName = setterArg;
        return this;
      }
      private @Nullable Map<String, String> extras;
      public @NonNull Builder setExtras(@Nullable Map<String, String> setterArg) {
        this.extras = setterArg;
        return this;
      }
      private @Nullable String throwable;
      public @NonNull Builder setThrowable(@Nullable String setterArg) {
        this.throwable = setterArg;
        return this;
      }
      public @NonNull LogEntity build() {
        LogEntity pigeonReturn = new LogEntity();
        pigeonReturn.setTimestamp(timestamp);
        pigeonReturn.setLevel(level);
        pigeonReturn.setCategory(category);
        pigeonReturn.setTag(tag);
        pigeonReturn.setMessage(message);
        pigeonReturn.setThreadName(threadName);
        pigeonReturn.setExtras(extras);
        pigeonReturn.setThrowable(throwable);
        return pigeonReturn;
      }
    }
    @NonNull ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(8);
      toListResult.add(timestamp);
      toListResult.add(level == null ? null : level.index);
      toListResult.add(category == null ? null : category.index);
      toListResult.add(tag);
      toListResult.add(message);
      toListResult.add(threadName);
      toListResult.add(extras);
      toListResult.add(throwable);
      return toListResult;
    }
    static @NonNull LogEntity fromList(@NonNull ArrayList<Object> list) {
      LogEntity pigeonResult = new LogEntity();
      Object timestamp = list.get(0);
      pigeonResult.setTimestamp((timestamp == null) ? null : ((timestamp instanceof Integer) ? (Integer)timestamp : (Long)timestamp));
      Object level = list.get(1);
      pigeonResult.setLevel(level == null ? null : LogLevel.values()[(int)level]);
      Object category = list.get(2);
      pigeonResult.setCategory(category == null ? null : LogCategory.values()[(int)category]);
      Object tag = list.get(3);
      pigeonResult.setTag((String)tag);
      Object message = list.get(4);
      pigeonResult.setMessage((String)message);
      Object threadName = list.get(5);
      pigeonResult.setThreadName((String)threadName);
      Object extras = list.get(6);
      pigeonResult.setExtras((Map<String, String>)extras);
      Object throwable = list.get(7);
      pigeonResult.setThrowable((String)throwable);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class Bucket {
    /** 存储桶的名称 */
    private @NonNull String name;
    public @NonNull String getName() { return name; }
    public void setName(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"name\" is null.");
      }
      this.name = setterArg;
    }

    /** 存储桶所在地域 */
    private @Nullable String location;
    public @Nullable String getLocation() { return location; }
    public void setLocation(@Nullable String setterArg) {
      this.location = setterArg;
    }

    /** 存储桶的创建时间，为 ISO8601 格式，例如2019-05-24T10:56:40Z */
    private @Nullable String createDate;
    public @Nullable String getCreateDate() { return createDate; }
    public void setCreateDate(@Nullable String setterArg) {
      this.createDate = setterArg;
    }

    private @Nullable String type;
    public @Nullable String getType() { return type; }
    public void setType(@Nullable String setterArg) {
      this.type = setterArg;
    }

    /**Constructor is private to enforce null safety; use Builder. */
    private Bucket() {}
    public static final class Builder {
      private @Nullable String name;
      public @NonNull Builder setName(@NonNull String setterArg) {
        this.name = setterArg;
        return this;
      }
      private @Nullable String location;
      public @NonNull Builder setLocation(@Nullable String setterArg) {
        this.location = setterArg;
        return this;
      }
      private @Nullable String createDate;
      public @NonNull Builder setCreateDate(@Nullable String setterArg) {
        this.createDate = setterArg;
        return this;
      }
      private @Nullable String type;
      public @NonNull Builder setType(@Nullable String setterArg) {
        this.type = setterArg;
        return this;
      }
      public @NonNull Bucket build() {
        Bucket pigeonReturn = new Bucket();
        pigeonReturn.setName(name);
        pigeonReturn.setLocation(location);
        pigeonReturn.setCreateDate(createDate);
        pigeonReturn.setType(type);
        return pigeonReturn;
      }
    }
    @NonNull ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(4);
      toListResult.add(name);
      toListResult.add(location);
      toListResult.add(createDate);
      toListResult.add(type);
      return toListResult;
    }
    static @NonNull Bucket fromList(@NonNull ArrayList<Object> list) {
      Bucket pigeonResult = new Bucket();
      Object name = list.get(0);
      pigeonResult.setName((String)name);
      Object location = list.get(1);
      pigeonResult.setLocation((String)location);
      Object createDate = list.get(2);
      pigeonResult.setCreateDate((String)createDate);
      Object type = list.get(3);
      pigeonResult.setType((String)type);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class ListAllMyBuckets {
    /** 存储桶持有者信息 */
    private @NonNull Owner owner;
    public @NonNull Owner getOwner() { return owner; }
    public void setOwner(@NonNull Owner setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"owner\" is null.");
      }
      this.owner = setterArg;
    }

    /** 存储桶列表 */
    private @NonNull List<Bucket> buckets;
    public @NonNull List<Bucket> getBuckets() { return buckets; }
    public void setBuckets(@NonNull List<Bucket> setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"buckets\" is null.");
      }
      this.buckets = setterArg;
    }

    /**Constructor is private to enforce null safety; use Builder. */
    private ListAllMyBuckets() {}
    public static final class Builder {
      private @Nullable Owner owner;
      public @NonNull Builder setOwner(@NonNull Owner setterArg) {
        this.owner = setterArg;
        return this;
      }
      private @Nullable List<Bucket> buckets;
      public @NonNull Builder setBuckets(@NonNull List<Bucket> setterArg) {
        this.buckets = setterArg;
        return this;
      }
      public @NonNull ListAllMyBuckets build() {
        ListAllMyBuckets pigeonReturn = new ListAllMyBuckets();
        pigeonReturn.setOwner(owner);
        pigeonReturn.setBuckets(buckets);
        return pigeonReturn;
      }
    }
    @NonNull ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(2);
      toListResult.add((owner == null) ? null : owner.toList());
      toListResult.add(buckets);
      return toListResult;
    }
    static @NonNull ListAllMyBuckets fromList(@NonNull ArrayList<Object> list) {
      ListAllMyBuckets pigeonResult = new ListAllMyBuckets();
      Object owner = list.get(0);
      pigeonResult.setOwner((owner == null) ? null : Owner.fromList((ArrayList<Object>)owner));
      Object buckets = list.get(1);
      pigeonResult.setBuckets((List<Bucket>)buckets);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class CommonPrefixes {
    /** Common Prefix 的前缀 */
    private @NonNull String prefix;
    public @NonNull String getPrefix() { return prefix; }
    public void setPrefix(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"prefix\" is null.");
      }
      this.prefix = setterArg;
    }

    /**Constructor is private to enforce null safety; use Builder. */
    private CommonPrefixes() {}
    public static final class Builder {
      private @Nullable String prefix;
      public @NonNull Builder setPrefix(@NonNull String setterArg) {
        this.prefix = setterArg;
        return this;
      }
      public @NonNull CommonPrefixes build() {
        CommonPrefixes pigeonReturn = new CommonPrefixes();
        pigeonReturn.setPrefix(prefix);
        return pigeonReturn;
      }
    }
    @NonNull ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(1);
      toListResult.add(prefix);
      return toListResult;
    }
    static @NonNull CommonPrefixes fromList(@NonNull ArrayList<Object> list) {
      CommonPrefixes pigeonResult = new CommonPrefixes();
      Object prefix = list.get(0);
      pigeonResult.setPrefix((String)prefix);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class Content {
    /** 对象键 */
    private @NonNull String key;
    public @NonNull String getKey() { return key; }
    public void setKey(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"key\" is null.");
      }
      this.key = setterArg;
    }

    /** 对象最后修改时间，为 ISO8601 格式，如2019-05-24T10:56:40Z */
    private @NonNull String lastModified;
    public @NonNull String getLastModified() { return lastModified; }
    public void setLastModified(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"lastModified\" is null.");
      }
      this.lastModified = setterArg;
    }

    /**
     * 对象的实体标签（Entity Tag），是对象被创建时标识对象内容的信息标签，可用于检查对象的内容是否发生变化，
     * 例如“8e0b617ca298a564c3331da28dcb50df”，此头部并不一定返回对象的 MD5 值，而是根据对象上传和加密方式而有所不同
     */
    private @NonNull String eTag;
    public @NonNull String getETag() { return eTag; }
    public void setETag(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"eTag\" is null.");
      }
      this.eTag = setterArg;
    }

    /** 对象大小，单位为 Byte */
    private @NonNull Long size;
    public @NonNull Long getSize() { return size; }
    public void setSize(@NonNull Long setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"size\" is null.");
      }
      this.size = setterArg;
    }

    /** 对象持有者信息 */
    private @NonNull Owner owner;
    public @NonNull Owner getOwner() { return owner; }
    public void setOwner(@NonNull Owner setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"owner\" is null.");
      }
      this.owner = setterArg;
    }

    /** 对象存储类型 */
    private @NonNull String storageClass;
    public @NonNull String getStorageClass() { return storageClass; }
    public void setStorageClass(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"storageClass\" is null.");
      }
      this.storageClass = setterArg;
    }

    /**Constructor is private to enforce null safety; use Builder. */
    private Content() {}
    public static final class Builder {
      private @Nullable String key;
      public @NonNull Builder setKey(@NonNull String setterArg) {
        this.key = setterArg;
        return this;
      }
      private @Nullable String lastModified;
      public @NonNull Builder setLastModified(@NonNull String setterArg) {
        this.lastModified = setterArg;
        return this;
      }
      private @Nullable String eTag;
      public @NonNull Builder setETag(@NonNull String setterArg) {
        this.eTag = setterArg;
        return this;
      }
      private @Nullable Long size;
      public @NonNull Builder setSize(@NonNull Long setterArg) {
        this.size = setterArg;
        return this;
      }
      private @Nullable Owner owner;
      public @NonNull Builder setOwner(@NonNull Owner setterArg) {
        this.owner = setterArg;
        return this;
      }
      private @Nullable String storageClass;
      public @NonNull Builder setStorageClass(@NonNull String setterArg) {
        this.storageClass = setterArg;
        return this;
      }
      public @NonNull Content build() {
        Content pigeonReturn = new Content();
        pigeonReturn.setKey(key);
        pigeonReturn.setLastModified(lastModified);
        pigeonReturn.setETag(eTag);
        pigeonReturn.setSize(size);
        pigeonReturn.setOwner(owner);
        pigeonReturn.setStorageClass(storageClass);
        return pigeonReturn;
      }
    }
    @NonNull ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(6);
      toListResult.add(key);
      toListResult.add(lastModified);
      toListResult.add(eTag);
      toListResult.add(size);
      toListResult.add((owner == null) ? null : owner.toList());
      toListResult.add(storageClass);
      return toListResult;
    }
    static @NonNull Content fromList(@NonNull ArrayList<Object> list) {
      Content pigeonResult = new Content();
      Object key = list.get(0);
      pigeonResult.setKey((String)key);
      Object lastModified = list.get(1);
      pigeonResult.setLastModified((String)lastModified);
      Object eTag = list.get(2);
      pigeonResult.setETag((String)eTag);
      Object size = list.get(3);
      pigeonResult.setSize((size == null) ? null : ((size instanceof Integer) ? (Integer)size : (Long)size));
      Object owner = list.get(4);
      pigeonResult.setOwner((owner == null) ? null : Owner.fromList((ArrayList<Object>)owner));
      Object storageClass = list.get(5);
      pigeonResult.setStorageClass((String)storageClass);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class BucketContents {
    /** 存储桶的名称，格式为<BucketName-APPID>，例如examplebucket-1250000000 */
    private @NonNull String name;
    public @NonNull String getName() { return name; }
    public void setName(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"name\" is null.");
      }
      this.name = setterArg;
    }

    /** 编码格式，对应请求中的 encoding-type 参数，且仅当请求中指定了 encoding-type 参数才会返回该节点 */
    private @Nullable String encodingType;
    public @Nullable String getEncodingType() { return encodingType; }
    public void setEncodingType(@Nullable String setterArg) {
      this.encodingType = setterArg;
    }

    /** 对象键匹配前缀，对应请求中的 prefix 参数 */
    private @Nullable String prefix;
    public @Nullable String getPrefix() { return prefix; }
    public void setPrefix(@Nullable String setterArg) {
      this.prefix = setterArg;
    }

    /** 起始对象键标记，从该标记之后（不含）按照 UTF-8 字典序返回对象键条目，对应请求中的 marker 参数 */
    private @Nullable String marker;
    public @Nullable String getMarker() { return marker; }
    public void setMarker(@Nullable String setterArg) {
      this.marker = setterArg;
    }

    /**
     * 单次响应返回结果的最大条目数量，对应请求中的 max-keys 参数
     * 注意：该参数会限制每一次 List 操作返回的最大条目数，COS 在每次 List 操作中将返回不超过 max-keys 所设定数值的条目。
     * 如果由于您设置了 max-keys 参数，导致单次响应中未列出所有对象，COS 会返回一项 nextmarker 参数作为您下次 List 请求的入参，
     * 以便您后续进行列出对象
     */
    private @NonNull Long maxKeys;
    public @NonNull Long getMaxKeys() { return maxKeys; }
    public void setMaxKeys(@NonNull Long setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"maxKeys\" is null.");
      }
      this.maxKeys = setterArg;
    }

    /** 响应条目是否被截断，布尔值，例如 true 或 false */
    private @NonNull Boolean isTruncated;
    public @NonNull Boolean getIsTruncated() { return isTruncated; }
    public void setIsTruncated(@NonNull Boolean setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"isTruncated\" is null.");
      }
      this.isTruncated = setterArg;
    }

    /**
     * 仅当响应条目有截断（IsTruncated 为 true）才会返回该节点，
     * 该节点的值为当前响应条目中的最后一个对象键，当需要继续请求后续条目时，将该节点的值作为下一次请求的 marker 参数传入
     */
    private @Nullable String nextMarker;
    public @Nullable String getNextMarker() { return nextMarker; }
    public void setNextMarker(@Nullable String setterArg) {
      this.nextMarker = setterArg;
    }

    /** 对象条目 */
    private @NonNull List<Content> contentsList;
    public @NonNull List<Content> getContentsList() { return contentsList; }
    public void setContentsList(@NonNull List<Content> setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"contentsList\" is null.");
      }
      this.contentsList = setterArg;
    }

    /**
     * 从 prefix 或从头（如未指定 prefix）到首个 delimiter 之间相同的部分，
     * 定义为 Common Prefix。仅当请求中指定了 delimiter 参数才有可能返回该节点
     */
    private @NonNull List<CommonPrefixes> commonPrefixesList;
    public @NonNull List<CommonPrefixes> getCommonPrefixesList() { return commonPrefixesList; }
    public void setCommonPrefixesList(@NonNull List<CommonPrefixes> setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"commonPrefixesList\" is null.");
      }
      this.commonPrefixesList = setterArg;
    }

    /** 分隔符，对应请求中的 delimiter 参数，且仅当请求中指定了 delimiter 参数才会返回该节点 */
    private @Nullable String delimiter;
    public @Nullable String getDelimiter() { return delimiter; }
    public void setDelimiter(@Nullable String setterArg) {
      this.delimiter = setterArg;
    }

    /**Constructor is private to enforce null safety; use Builder. */
    private BucketContents() {}
    public static final class Builder {
      private @Nullable String name;
      public @NonNull Builder setName(@NonNull String setterArg) {
        this.name = setterArg;
        return this;
      }
      private @Nullable String encodingType;
      public @NonNull Builder setEncodingType(@Nullable String setterArg) {
        this.encodingType = setterArg;
        return this;
      }
      private @Nullable String prefix;
      public @NonNull Builder setPrefix(@Nullable String setterArg) {
        this.prefix = setterArg;
        return this;
      }
      private @Nullable String marker;
      public @NonNull Builder setMarker(@Nullable String setterArg) {
        this.marker = setterArg;
        return this;
      }
      private @Nullable Long maxKeys;
      public @NonNull Builder setMaxKeys(@NonNull Long setterArg) {
        this.maxKeys = setterArg;
        return this;
      }
      private @Nullable Boolean isTruncated;
      public @NonNull Builder setIsTruncated(@NonNull Boolean setterArg) {
        this.isTruncated = setterArg;
        return this;
      }
      private @Nullable String nextMarker;
      public @NonNull Builder setNextMarker(@Nullable String setterArg) {
        this.nextMarker = setterArg;
        return this;
      }
      private @Nullable List<Content> contentsList;
      public @NonNull Builder setContentsList(@NonNull List<Content> setterArg) {
        this.contentsList = setterArg;
        return this;
      }
      private @Nullable List<CommonPrefixes> commonPrefixesList;
      public @NonNull Builder setCommonPrefixesList(@NonNull List<CommonPrefixes> setterArg) {
        this.commonPrefixesList = setterArg;
        return this;
      }
      private @Nullable String delimiter;
      public @NonNull Builder setDelimiter(@Nullable String setterArg) {
        this.delimiter = setterArg;
        return this;
      }
      public @NonNull BucketContents build() {
        BucketContents pigeonReturn = new BucketContents();
        pigeonReturn.setName(name);
        pigeonReturn.setEncodingType(encodingType);
        pigeonReturn.setPrefix(prefix);
        pigeonReturn.setMarker(marker);
        pigeonReturn.setMaxKeys(maxKeys);
        pigeonReturn.setIsTruncated(isTruncated);
        pigeonReturn.setNextMarker(nextMarker);
        pigeonReturn.setContentsList(contentsList);
        pigeonReturn.setCommonPrefixesList(commonPrefixesList);
        pigeonReturn.setDelimiter(delimiter);
        return pigeonReturn;
      }
    }
    @NonNull ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(10);
      toListResult.add(name);
      toListResult.add(encodingType);
      toListResult.add(prefix);
      toListResult.add(marker);
      toListResult.add(maxKeys);
      toListResult.add(isTruncated);
      toListResult.add(nextMarker);
      toListResult.add(contentsList);
      toListResult.add(commonPrefixesList);
      toListResult.add(delimiter);
      return toListResult;
    }
    static @NonNull BucketContents fromList(@NonNull ArrayList<Object> list) {
      BucketContents pigeonResult = new BucketContents();
      Object name = list.get(0);
      pigeonResult.setName((String)name);
      Object encodingType = list.get(1);
      pigeonResult.setEncodingType((String)encodingType);
      Object prefix = list.get(2);
      pigeonResult.setPrefix((String)prefix);
      Object marker = list.get(3);
      pigeonResult.setMarker((String)marker);
      Object maxKeys = list.get(4);
      pigeonResult.setMaxKeys((maxKeys == null) ? null : ((maxKeys instanceof Integer) ? (Integer)maxKeys : (Long)maxKeys));
      Object isTruncated = list.get(5);
      pigeonResult.setIsTruncated((Boolean)isTruncated);
      Object nextMarker = list.get(6);
      pigeonResult.setNextMarker((String)nextMarker);
      Object contentsList = list.get(7);
      pigeonResult.setContentsList((List<Content>)contentsList);
      Object commonPrefixesList = list.get(8);
      pigeonResult.setCommonPrefixesList((List<CommonPrefixes>)commonPrefixesList);
      Object delimiter = list.get(9);
      pigeonResult.setDelimiter((String)delimiter);
      return pigeonResult;
    }
  }

  public interface Result<T> {
    void success(T result);
    void error(Throwable error);
  }
  private static class CosApiCodec extends StandardMessageCodec {
    public static final CosApiCodec INSTANCE = new CosApiCodec();
    private CosApiCodec() {}
    @Override
    protected Object readValueOfType(byte type, @NonNull ByteBuffer buffer) {
      switch (type) {
        case (byte)128:         
          return CosXmlServiceConfig.fromList((ArrayList<Object>) readValue(buffer));
        
        case (byte)129:         
          return TransferConfig.fromList((ArrayList<Object>) readValue(buffer));
        
        default:        
          return super.readValueOfType(type, buffer);
        
      }
    }
    @Override
    protected void writeValue(@NonNull ByteArrayOutputStream stream, Object value)     {
      if (value instanceof CosXmlServiceConfig) {
        stream.write(128);
        writeValue(stream, ((CosXmlServiceConfig) value).toList());
      } else 
      if (value instanceof TransferConfig) {
        stream.write(129);
        writeValue(stream, ((TransferConfig) value).toList());
      } else 
{
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter. */
  public interface CosApi {
    void initWithPlainSecret(@NonNull String secretId, @NonNull String secretKey);
    void initWithSessionCredential();
    void initWithScopeLimitCredential();
    void initCustomerDNS(@NonNull Map<String, List<String>> dnsMap);
    void initCustomerDNSFetch();
    void forceInvalidationCredential();
    void setCloseBeacon(@NonNull Boolean isCloseBeacon);
    void registerDefaultService(@NonNull CosXmlServiceConfig config, Result<String> result);
    void registerDefaultTransferManger(@NonNull CosXmlServiceConfig config, @Nullable TransferConfig transferConfig, Result<String> result);
    void registerService(@NonNull String key, @NonNull CosXmlServiceConfig config, Result<String> result);
    void registerTransferManger(@NonNull String key, @NonNull CosXmlServiceConfig config, @Nullable TransferConfig transferConfig, Result<String> result);
    void enableLogcat(@NonNull Boolean enable);
    void enableLogFile(@NonNull Boolean enable);
    void addLogListener(@NonNull Long key);
    void removeLogListener(@NonNull Long key);
    void setMinLevel(@NonNull LogLevel minLevel);
    void setLogcatMinLevel(@NonNull LogLevel minLevel);
    void setFileMinLevel(@NonNull LogLevel minLevel);
    void setClsMinLevel(@NonNull LogLevel minLevel);
    void setDeviceID(@NonNull String deviceID);
    void setDeviceModel(@NonNull String deviceModel);
    void setAppVersion(@NonNull String appVersion);
    void setExtras(@NonNull Map<String, String> extras);
    void setLogFileEncryptionKey(@NonNull byte[] key, @NonNull byte[] iv);
    @NonNull String getLogRootDir();
    void setCLsChannelAnonymous(@NonNull String topicId, @NonNull String endpoint);
    void setCLsChannelStaticKey(@NonNull String topicId, @NonNull String endpoint, @NonNull String secretId, @NonNull String secretKey);
    void setCLsChannelSessionCredential(@NonNull String topicId, @NonNull String endpoint);
    void addSensitiveRule(@NonNull String ruleName, @NonNull String regex);
    void removeSensitiveRule(@NonNull String ruleName);

    /** The codec used by CosApi. */
    static MessageCodec<Object> getCodec() {
      return       CosApiCodec.INSTANCE;    }
    /**Sets up an instance of `CosApi` to handle messages through the `binaryMessenger`. */
    static void setup(BinaryMessenger binaryMessenger, CosApi api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.CosApi.initWithPlainSecret", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            ArrayList wrapped = new ArrayList<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              assert args != null;
              String secretIdArg = (String)args.get(0);
              if (secretIdArg == null) {
                throw new NullPointerException("secretIdArg unexpectedly null.");
              }
              String secretKeyArg = (String)args.get(1);
              if (secretKeyArg == null) {
                throw new NullPointerException("secretKeyArg unexpectedly null.");
              }
              api.initWithPlainSecret(secretIdArg, secretKeyArg);
              wrapped.add(0, null);
            }
            catch (Error | RuntimeException exception) {
              ArrayList<Object> wrappedError = wrapError(exception);
              wrapped = wrappedError;
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.CosApi.initWithSessionCredential", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            ArrayList wrapped = new ArrayList<>();
            try {
              api.initWithSessionCredential();
              wrapped.add(0, null);
            }
            catch (Error | RuntimeException exception) {
              ArrayList<Object> wrappedError = wrapError(exception);
              wrapped = wrappedError;
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.CosApi.initWithScopeLimitCredential", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            ArrayList wrapped = new ArrayList<>();
            try {
              api.initWithScopeLimitCredential();
              wrapped.add(0, null);
            }
            catch (Error | RuntimeException exception) {
              ArrayList<Object> wrappedError = wrapError(exception);
              wrapped = wrappedError;
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.CosApi.initCustomerDNS", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            ArrayList wrapped = new ArrayList<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              assert args != null;
              Map<String, List<String>> dnsMapArg = (Map<String, List<String>>)args.get(0);
              if (dnsMapArg == null) {
                throw new NullPointerException("dnsMapArg unexpectedly null.");
              }
              api.initCustomerDNS(dnsMapArg);
              wrapped.add(0, null);
            }
            catch (Error | RuntimeException exception) {
              ArrayList<Object> wrappedError = wrapError(exception);
              wrapped = wrappedError;
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.CosApi.initCustomerDNSFetch", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            ArrayList wrapped = new ArrayList<>();
            try {
              api.initCustomerDNSFetch();
              wrapped.add(0, null);
            }
            catch (Error | RuntimeException exception) {
              ArrayList<Object> wrappedError = wrapError(exception);
              wrapped = wrappedError;
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.CosApi.forceInvalidationCredential", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            ArrayList wrapped = new ArrayList<>();
            try {
              api.forceInvalidationCredential();
              wrapped.add(0, null);
            }
            catch (Error | RuntimeException exception) {
              ArrayList<Object> wrappedError = wrapError(exception);
              wrapped = wrappedError;
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.CosApi.setCloseBeacon", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            ArrayList wrapped = new ArrayList<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              assert args != null;
              Boolean isCloseBeaconArg = (Boolean)args.get(0);
              if (isCloseBeaconArg == null) {
                throw new NullPointerException("isCloseBeaconArg unexpectedly null.");
              }
              api.setCloseBeacon(isCloseBeaconArg);
              wrapped.add(0, null);
            }
            catch (Error | RuntimeException exception) {
              ArrayList<Object> wrappedError = wrapError(exception);
              wrapped = wrappedError;
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.CosApi.registerDefaultService", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            ArrayList wrapped = new ArrayList<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              assert args != null;
              CosXmlServiceConfig configArg = (CosXmlServiceConfig)args.get(0);
              if (configArg == null) {
                throw new NullPointerException("configArg unexpectedly null.");
              }
              Result<String> resultCallback = new Result<String>() {
                public void success(String result) {
                  wrapped.add(0, result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  ArrayList<Object> wrappedError = wrapError(error);
                  reply.reply(wrappedError);
                }
              };

              api.registerDefaultService(configArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              ArrayList<Object> wrappedError = wrapError(exception);
              reply.reply(wrappedError);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.CosApi.registerDefaultTransferManger", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            ArrayList wrapped = new ArrayList<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              assert args != null;
              CosXmlServiceConfig configArg = (CosXmlServiceConfig)args.get(0);
              if (configArg == null) {
                throw new NullPointerException("configArg unexpectedly null.");
              }
              TransferConfig transferConfigArg = (TransferConfig)args.get(1);
              Result<String> resultCallback = new Result<String>() {
                public void success(String result) {
                  wrapped.add(0, result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  ArrayList<Object> wrappedError = wrapError(error);
                  reply.reply(wrappedError);
                }
              };

              api.registerDefaultTransferManger(configArg, transferConfigArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              ArrayList<Object> wrappedError = wrapError(exception);
              reply.reply(wrappedError);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.CosApi.registerService", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            ArrayList wrapped = new ArrayList<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              assert args != null;
              String keyArg = (String)args.get(0);
              if (keyArg == null) {
                throw new NullPointerException("keyArg unexpectedly null.");
              }
              CosXmlServiceConfig configArg = (CosXmlServiceConfig)args.get(1);
              if (configArg == null) {
                throw new NullPointerException("configArg unexpectedly null.");
              }
              Result<String> resultCallback = new Result<String>() {
                public void success(String result) {
                  wrapped.add(0, result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  ArrayList<Object> wrappedError = wrapError(error);
                  reply.reply(wrappedError);
                }
              };

              api.registerService(keyArg, configArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              ArrayList<Object> wrappedError = wrapError(exception);
              reply.reply(wrappedError);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.CosApi.registerTransferManger", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            ArrayList wrapped = new ArrayList<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              assert args != null;
              String keyArg = (String)args.get(0);
              if (keyArg == null) {
                throw new NullPointerException("keyArg unexpectedly null.");
              }
              CosXmlServiceConfig configArg = (CosXmlServiceConfig)args.get(1);
              if (configArg == null) {
                throw new NullPointerException("configArg unexpectedly null.");
              }
              TransferConfig transferConfigArg = (TransferConfig)args.get(2);
              Result<String> resultCallback = new Result<String>() {
                public void success(String result) {
                  wrapped.add(0, result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  ArrayList<Object> wrappedError = wrapError(error);
                  reply.reply(wrappedError);
                }
              };

              api.registerTransferManger(keyArg, configArg, transferConfigArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              ArrayList<Object> wrappedError = wrapError(exception);
              reply.reply(wrappedError);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.CosApi.enableLogcat", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            ArrayList wrapped = new ArrayList<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              assert args != null;
              Boolean enableArg = (Boolean)args.get(0);
              if (enableArg == null) {
                throw new NullPointerException("enableArg unexpectedly null.");
              }
              api.enableLogcat(enableArg);
              wrapped.add(0, null);
            }
            catch (Error | RuntimeException exception) {
              ArrayList<Object> wrappedError = wrapError(exception);
              wrapped = wrappedError;
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.CosApi.enableLogFile", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            ArrayList wrapped = new ArrayList<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              assert args != null;
              Boolean enableArg = (Boolean)args.get(0);
              if (enableArg == null) {
                throw new NullPointerException("enableArg unexpectedly null.");
              }
              api.enableLogFile(enableArg);
              wrapped.add(0, null);
            }
            catch (Error | RuntimeException exception) {
              ArrayList<Object> wrappedError = wrapError(exception);
              wrapped = wrappedError;
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.CosApi.addLogListener", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            ArrayList wrapped = new ArrayList<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              assert args != null;
              Number keyArg = (Number)args.get(0);
              if (keyArg == null) {
                throw new NullPointerException("keyArg unexpectedly null.");
              }
              api.addLogListener((keyArg == null) ? null : keyArg.longValue());
              wrapped.add(0, null);
            }
            catch (Error | RuntimeException exception) {
              ArrayList<Object> wrappedError = wrapError(exception);
              wrapped = wrappedError;
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.CosApi.removeLogListener", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            ArrayList wrapped = new ArrayList<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              assert args != null;
              Number keyArg = (Number)args.get(0);
              if (keyArg == null) {
                throw new NullPointerException("keyArg unexpectedly null.");
              }
              api.removeLogListener((keyArg == null) ? null : keyArg.longValue());
              wrapped.add(0, null);
            }
            catch (Error | RuntimeException exception) {
              ArrayList<Object> wrappedError = wrapError(exception);
              wrapped = wrappedError;
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.CosApi.setMinLevel", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            ArrayList wrapped = new ArrayList<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              assert args != null;
              LogLevel minLevelArg = args.get(0) == null ? null : LogLevel.values()[(int)args.get(0)];
              if (minLevelArg == null) {
                throw new NullPointerException("minLevelArg unexpectedly null.");
              }
              api.setMinLevel(minLevelArg);
              wrapped.add(0, null);
            }
            catch (Error | RuntimeException exception) {
              ArrayList<Object> wrappedError = wrapError(exception);
              wrapped = wrappedError;
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.CosApi.setLogcatMinLevel", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            ArrayList wrapped = new ArrayList<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              assert args != null;
              LogLevel minLevelArg = args.get(0) == null ? null : LogLevel.values()[(int)args.get(0)];
              if (minLevelArg == null) {
                throw new NullPointerException("minLevelArg unexpectedly null.");
              }
              api.setLogcatMinLevel(minLevelArg);
              wrapped.add(0, null);
            }
            catch (Error | RuntimeException exception) {
              ArrayList<Object> wrappedError = wrapError(exception);
              wrapped = wrappedError;
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.CosApi.setFileMinLevel", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            ArrayList wrapped = new ArrayList<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              assert args != null;
              LogLevel minLevelArg = args.get(0) == null ? null : LogLevel.values()[(int)args.get(0)];
              if (minLevelArg == null) {
                throw new NullPointerException("minLevelArg unexpectedly null.");
              }
              api.setFileMinLevel(minLevelArg);
              wrapped.add(0, null);
            }
            catch (Error | RuntimeException exception) {
              ArrayList<Object> wrappedError = wrapError(exception);
              wrapped = wrappedError;
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.CosApi.setClsMinLevel", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            ArrayList wrapped = new ArrayList<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              assert args != null;
              LogLevel minLevelArg = args.get(0) == null ? null : LogLevel.values()[(int)args.get(0)];
              if (minLevelArg == null) {
                throw new NullPointerException("minLevelArg unexpectedly null.");
              }
              api.setClsMinLevel(minLevelArg);
              wrapped.add(0, null);
            }
            catch (Error | RuntimeException exception) {
              ArrayList<Object> wrappedError = wrapError(exception);
              wrapped = wrappedError;
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.CosApi.setDeviceID", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            ArrayList wrapped = new ArrayList<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              assert args != null;
              String deviceIDArg = (String)args.get(0);
              if (deviceIDArg == null) {
                throw new NullPointerException("deviceIDArg unexpectedly null.");
              }
              api.setDeviceID(deviceIDArg);
              wrapped.add(0, null);
            }
            catch (Error | RuntimeException exception) {
              ArrayList<Object> wrappedError = wrapError(exception);
              wrapped = wrappedError;
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.CosApi.setDeviceModel", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            ArrayList wrapped = new ArrayList<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              assert args != null;
              String deviceModelArg = (String)args.get(0);
              if (deviceModelArg == null) {
                throw new NullPointerException("deviceModelArg unexpectedly null.");
              }
              api.setDeviceModel(deviceModelArg);
              wrapped.add(0, null);
            }
            catch (Error | RuntimeException exception) {
              ArrayList<Object> wrappedError = wrapError(exception);
              wrapped = wrappedError;
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.CosApi.setAppVersion", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            ArrayList wrapped = new ArrayList<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              assert args != null;
              String appVersionArg = (String)args.get(0);
              if (appVersionArg == null) {
                throw new NullPointerException("appVersionArg unexpectedly null.");
              }
              api.setAppVersion(appVersionArg);
              wrapped.add(0, null);
            }
            catch (Error | RuntimeException exception) {
              ArrayList<Object> wrappedError = wrapError(exception);
              wrapped = wrappedError;
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.CosApi.setExtras", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            ArrayList wrapped = new ArrayList<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              assert args != null;
              Map<String, String> extrasArg = (Map<String, String>)args.get(0);
              if (extrasArg == null) {
                throw new NullPointerException("extrasArg unexpectedly null.");
              }
              api.setExtras(extrasArg);
              wrapped.add(0, null);
            }
            catch (Error | RuntimeException exception) {
              ArrayList<Object> wrappedError = wrapError(exception);
              wrapped = wrappedError;
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.CosApi.setLogFileEncryptionKey", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            ArrayList wrapped = new ArrayList<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              assert args != null;
              byte[] keyArg = (byte[])args.get(0);
              if (keyArg == null) {
                throw new NullPointerException("keyArg unexpectedly null.");
              }
              byte[] ivArg = (byte[])args.get(1);
              if (ivArg == null) {
                throw new NullPointerException("ivArg unexpectedly null.");
              }
              api.setLogFileEncryptionKey(keyArg, ivArg);
              wrapped.add(0, null);
            }
            catch (Error | RuntimeException exception) {
              ArrayList<Object> wrappedError = wrapError(exception);
              wrapped = wrappedError;
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.CosApi.getLogRootDir", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            ArrayList wrapped = new ArrayList<>();
            try {
              String output = api.getLogRootDir();
              wrapped.add(0, output);
            }
            catch (Error | RuntimeException exception) {
              ArrayList<Object> wrappedError = wrapError(exception);
              wrapped = wrappedError;
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.CosApi.setCLsChannelAnonymous", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            ArrayList wrapped = new ArrayList<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              assert args != null;
              String topicIdArg = (String)args.get(0);
              if (topicIdArg == null) {
                throw new NullPointerException("topicIdArg unexpectedly null.");
              }
              String endpointArg = (String)args.get(1);
              if (endpointArg == null) {
                throw new NullPointerException("endpointArg unexpectedly null.");
              }
              api.setCLsChannelAnonymous(topicIdArg, endpointArg);
              wrapped.add(0, null);
            }
            catch (Error | RuntimeException exception) {
              ArrayList<Object> wrappedError = wrapError(exception);
              wrapped = wrappedError;
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.CosApi.setCLsChannelStaticKey", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            ArrayList wrapped = new ArrayList<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              assert args != null;
              String topicIdArg = (String)args.get(0);
              if (topicIdArg == null) {
                throw new NullPointerException("topicIdArg unexpectedly null.");
              }
              String endpointArg = (String)args.get(1);
              if (endpointArg == null) {
                throw new NullPointerException("endpointArg unexpectedly null.");
              }
              String secretIdArg = (String)args.get(2);
              if (secretIdArg == null) {
                throw new NullPointerException("secretIdArg unexpectedly null.");
              }
              String secretKeyArg = (String)args.get(3);
              if (secretKeyArg == null) {
                throw new NullPointerException("secretKeyArg unexpectedly null.");
              }
              api.setCLsChannelStaticKey(topicIdArg, endpointArg, secretIdArg, secretKeyArg);
              wrapped.add(0, null);
            }
            catch (Error | RuntimeException exception) {
              ArrayList<Object> wrappedError = wrapError(exception);
              wrapped = wrappedError;
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.CosApi.setCLsChannelSessionCredential", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            ArrayList wrapped = new ArrayList<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              assert args != null;
              String topicIdArg = (String)args.get(0);
              if (topicIdArg == null) {
                throw new NullPointerException("topicIdArg unexpectedly null.");
              }
              String endpointArg = (String)args.get(1);
              if (endpointArg == null) {
                throw new NullPointerException("endpointArg unexpectedly null.");
              }
              api.setCLsChannelSessionCredential(topicIdArg, endpointArg);
              wrapped.add(0, null);
            }
            catch (Error | RuntimeException exception) {
              ArrayList<Object> wrappedError = wrapError(exception);
              wrapped = wrappedError;
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.CosApi.addSensitiveRule", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            ArrayList wrapped = new ArrayList<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              assert args != null;
              String ruleNameArg = (String)args.get(0);
              if (ruleNameArg == null) {
                throw new NullPointerException("ruleNameArg unexpectedly null.");
              }
              String regexArg = (String)args.get(1);
              if (regexArg == null) {
                throw new NullPointerException("regexArg unexpectedly null.");
              }
              api.addSensitiveRule(ruleNameArg, regexArg);
              wrapped.add(0, null);
            }
            catch (Error | RuntimeException exception) {
              ArrayList<Object> wrappedError = wrapError(exception);
              wrapped = wrappedError;
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.CosApi.removeSensitiveRule", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            ArrayList wrapped = new ArrayList<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              assert args != null;
              String ruleNameArg = (String)args.get(0);
              if (ruleNameArg == null) {
                throw new NullPointerException("ruleNameArg unexpectedly null.");
              }
              api.removeSensitiveRule(ruleNameArg);
              wrapped.add(0, null);
            }
            catch (Error | RuntimeException exception) {
              ArrayList<Object> wrappedError = wrapError(exception);
              wrapped = wrappedError;
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
  private static class CosServiceApiCodec extends StandardMessageCodec {
    public static final CosServiceApiCodec INSTANCE = new CosServiceApiCodec();
    private CosServiceApiCodec() {}
    @Override
    protected Object readValueOfType(byte type, @NonNull ByteBuffer buffer) {
      switch (type) {
        case (byte)128:         
          return Bucket.fromList((ArrayList<Object>) readValue(buffer));
        
        case (byte)129:         
          return BucketContents.fromList((ArrayList<Object>) readValue(buffer));
        
        case (byte)130:         
          return CommonPrefixes.fromList((ArrayList<Object>) readValue(buffer));
        
        case (byte)131:         
          return Content.fromList((ArrayList<Object>) readValue(buffer));
        
        case (byte)132:         
          return ListAllMyBuckets.fromList((ArrayList<Object>) readValue(buffer));
        
        case (byte)133:         
          return Owner.fromList((ArrayList<Object>) readValue(buffer));
        
        default:        
          return super.readValueOfType(type, buffer);
        
      }
    }
    @Override
    protected void writeValue(@NonNull ByteArrayOutputStream stream, Object value)     {
      if (value instanceof Bucket) {
        stream.write(128);
        writeValue(stream, ((Bucket) value).toList());
      } else 
      if (value instanceof BucketContents) {
        stream.write(129);
        writeValue(stream, ((BucketContents) value).toList());
      } else 
      if (value instanceof CommonPrefixes) {
        stream.write(130);
        writeValue(stream, ((CommonPrefixes) value).toList());
      } else 
      if (value instanceof Content) {
        stream.write(131);
        writeValue(stream, ((Content) value).toList());
      } else 
      if (value instanceof ListAllMyBuckets) {
        stream.write(132);
        writeValue(stream, ((ListAllMyBuckets) value).toList());
      } else 
      if (value instanceof Owner) {
        stream.write(133);
        writeValue(stream, ((Owner) value).toList());
      } else 
{
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter. */
  public interface CosServiceApi {
    void headObject(@NonNull String serviceKey, @NonNull String bucket, @Nullable String region, @NonNull String cosPath, @Nullable String versionId, Result<Map<String, String>> result);
    void deleteObject(@NonNull String serviceKey, @NonNull String bucket, @Nullable String region, @NonNull String cosPath, @Nullable String versionId, Result<Void> result);
    @NonNull String getObjectUrl(@NonNull String bucket, @NonNull String region, @NonNull String cosPath, @NonNull String serviceKey);
    void getPresignedUrl(@NonNull String serviceKey, @NonNull String bucket, @NonNull String cosPath, @Nullable Long signValidTime, @Nullable Boolean signHost, @Nullable Map<String, String> parameters, @Nullable String region, Result<String> result);
    void preBuildConnection(@NonNull String bucket, @NonNull String serviceKey, Result<Void> result);
    void getService(@NonNull String serviceKey, Result<ListAllMyBuckets> result);
    void getBucket(@NonNull String serviceKey, @NonNull String bucket, @Nullable String region, @Nullable String prefix, @Nullable String delimiter, @Nullable String encodingType, @Nullable String marker, @Nullable Long maxKeys, Result<BucketContents> result);
    void putBucket(@NonNull String serviceKey, @NonNull String bucket, @Nullable String region, @Nullable Boolean enableMAZ, @Nullable String cosacl, @Nullable String readAccount, @Nullable String writeAccount, @Nullable String readWriteAccount, Result<Void> result);
    void headBucket(@NonNull String serviceKey, @NonNull String bucket, @Nullable String region, Result<Map<String, String>> result);
    void deleteBucket(@NonNull String serviceKey, @NonNull String bucket, @Nullable String region, Result<Void> result);
    void getBucketAccelerate(@NonNull String serviceKey, @NonNull String bucket, @Nullable String region, Result<Boolean> result);
    void putBucketAccelerate(@NonNull String serviceKey, @NonNull String bucket, @Nullable String region, @NonNull Boolean enable, Result<Void> result);
    void getBucketLocation(@NonNull String serviceKey, @NonNull String bucket, @Nullable String region, Result<String> result);
    void getBucketVersioning(@NonNull String serviceKey, @NonNull String bucket, @Nullable String region, Result<Boolean> result);
    void putBucketVersioning(@NonNull String serviceKey, @NonNull String bucket, @Nullable String region, @NonNull Boolean enable, Result<Void> result);
    void doesBucketExist(@NonNull String serviceKey, @NonNull String bucket, Result<Boolean> result);
    void doesObjectExist(@NonNull String serviceKey, @NonNull String bucket, @NonNull String cosPath, Result<Boolean> result);
    void cancelAll(@NonNull String serviceKey);

    /** The codec used by CosServiceApi. */
    static MessageCodec<Object> getCodec() {
      return       CosServiceApiCodec.INSTANCE;    }
    /**Sets up an instance of `CosServiceApi` to handle messages through the `binaryMessenger`. */
    static void setup(BinaryMessenger binaryMessenger, CosServiceApi api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.CosServiceApi.headObject", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            ArrayList wrapped = new ArrayList<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              assert args != null;
              String serviceKeyArg = (String)args.get(0);
              if (serviceKeyArg == null) {
                throw new NullPointerException("serviceKeyArg unexpectedly null.");
              }
              String bucketArg = (String)args.get(1);
              if (bucketArg == null) {
                throw new NullPointerException("bucketArg unexpectedly null.");
              }
              String regionArg = (String)args.get(2);
              String cosPathArg = (String)args.get(3);
              if (cosPathArg == null) {
                throw new NullPointerException("cosPathArg unexpectedly null.");
              }
              String versionIdArg = (String)args.get(4);
              Result<Map<String, String>> resultCallback = new Result<Map<String, String>>() {
                public void success(Map<String, String> result) {
                  wrapped.add(0, result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  ArrayList<Object> wrappedError = wrapError(error);
                  reply.reply(wrappedError);
                }
              };

              api.headObject(serviceKeyArg, bucketArg, regionArg, cosPathArg, versionIdArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              ArrayList<Object> wrappedError = wrapError(exception);
              reply.reply(wrappedError);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.CosServiceApi.deleteObject", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            ArrayList wrapped = new ArrayList<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              assert args != null;
              String serviceKeyArg = (String)args.get(0);
              if (serviceKeyArg == null) {
                throw new NullPointerException("serviceKeyArg unexpectedly null.");
              }
              String bucketArg = (String)args.get(1);
              if (bucketArg == null) {
                throw new NullPointerException("bucketArg unexpectedly null.");
              }
              String regionArg = (String)args.get(2);
              String cosPathArg = (String)args.get(3);
              if (cosPathArg == null) {
                throw new NullPointerException("cosPathArg unexpectedly null.");
              }
              String versionIdArg = (String)args.get(4);
              Result<Void> resultCallback = new Result<Void>() {
                public void success(Void result) {
                  wrapped.add(0, null);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  ArrayList<Object> wrappedError = wrapError(error);
                  reply.reply(wrappedError);
                }
              };

              api.deleteObject(serviceKeyArg, bucketArg, regionArg, cosPathArg, versionIdArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              ArrayList<Object> wrappedError = wrapError(exception);
              reply.reply(wrappedError);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.CosServiceApi.getObjectUrl", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            ArrayList wrapped = new ArrayList<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              assert args != null;
              String bucketArg = (String)args.get(0);
              if (bucketArg == null) {
                throw new NullPointerException("bucketArg unexpectedly null.");
              }
              String regionArg = (String)args.get(1);
              if (regionArg == null) {
                throw new NullPointerException("regionArg unexpectedly null.");
              }
              String cosPathArg = (String)args.get(2);
              if (cosPathArg == null) {
                throw new NullPointerException("cosPathArg unexpectedly null.");
              }
              String serviceKeyArg = (String)args.get(3);
              if (serviceKeyArg == null) {
                throw new NullPointerException("serviceKeyArg unexpectedly null.");
              }
              String output = api.getObjectUrl(bucketArg, regionArg, cosPathArg, serviceKeyArg);
              wrapped.add(0, output);
            }
            catch (Error | RuntimeException exception) {
              ArrayList<Object> wrappedError = wrapError(exception);
              wrapped = wrappedError;
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.CosServiceApi.getPresignedUrl", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            ArrayList wrapped = new ArrayList<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              assert args != null;
              String serviceKeyArg = (String)args.get(0);
              if (serviceKeyArg == null) {
                throw new NullPointerException("serviceKeyArg unexpectedly null.");
              }
              String bucketArg = (String)args.get(1);
              if (bucketArg == null) {
                throw new NullPointerException("bucketArg unexpectedly null.");
              }
              String cosPathArg = (String)args.get(2);
              if (cosPathArg == null) {
                throw new NullPointerException("cosPathArg unexpectedly null.");
              }
              Number signValidTimeArg = (Number)args.get(3);
              Boolean signHostArg = (Boolean)args.get(4);
              Map<String, String> parametersArg = (Map<String, String>)args.get(5);
              String regionArg = (String)args.get(6);
              Result<String> resultCallback = new Result<String>() {
                public void success(String result) {
                  wrapped.add(0, result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  ArrayList<Object> wrappedError = wrapError(error);
                  reply.reply(wrappedError);
                }
              };

              api.getPresignedUrl(serviceKeyArg, bucketArg, cosPathArg, (signValidTimeArg == null) ? null : signValidTimeArg.longValue(), signHostArg, parametersArg, regionArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              ArrayList<Object> wrappedError = wrapError(exception);
              reply.reply(wrappedError);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.CosServiceApi.preBuildConnection", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            ArrayList wrapped = new ArrayList<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              assert args != null;
              String bucketArg = (String)args.get(0);
              if (bucketArg == null) {
                throw new NullPointerException("bucketArg unexpectedly null.");
              }
              String serviceKeyArg = (String)args.get(1);
              if (serviceKeyArg == null) {
                throw new NullPointerException("serviceKeyArg unexpectedly null.");
              }
              Result<Void> resultCallback = new Result<Void>() {
                public void success(Void result) {
                  wrapped.add(0, null);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  ArrayList<Object> wrappedError = wrapError(error);
                  reply.reply(wrappedError);
                }
              };

              api.preBuildConnection(bucketArg, serviceKeyArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              ArrayList<Object> wrappedError = wrapError(exception);
              reply.reply(wrappedError);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.CosServiceApi.getService", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            ArrayList wrapped = new ArrayList<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              assert args != null;
              String serviceKeyArg = (String)args.get(0);
              if (serviceKeyArg == null) {
                throw new NullPointerException("serviceKeyArg unexpectedly null.");
              }
              Result<ListAllMyBuckets> resultCallback = new Result<ListAllMyBuckets>() {
                public void success(ListAllMyBuckets result) {
                  wrapped.add(0, result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  ArrayList<Object> wrappedError = wrapError(error);
                  reply.reply(wrappedError);
                }
              };

              api.getService(serviceKeyArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              ArrayList<Object> wrappedError = wrapError(exception);
              reply.reply(wrappedError);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.CosServiceApi.getBucket", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            ArrayList wrapped = new ArrayList<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              assert args != null;
              String serviceKeyArg = (String)args.get(0);
              if (serviceKeyArg == null) {
                throw new NullPointerException("serviceKeyArg unexpectedly null.");
              }
              String bucketArg = (String)args.get(1);
              if (bucketArg == null) {
                throw new NullPointerException("bucketArg unexpectedly null.");
              }
              String regionArg = (String)args.get(2);
              String prefixArg = (String)args.get(3);
              String delimiterArg = (String)args.get(4);
              String encodingTypeArg = (String)args.get(5);
              String markerArg = (String)args.get(6);
              Number maxKeysArg = (Number)args.get(7);
              Result<BucketContents> resultCallback = new Result<BucketContents>() {
                public void success(BucketContents result) {
                  wrapped.add(0, result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  ArrayList<Object> wrappedError = wrapError(error);
                  reply.reply(wrappedError);
                }
              };

              api.getBucket(serviceKeyArg, bucketArg, regionArg, prefixArg, delimiterArg, encodingTypeArg, markerArg, (maxKeysArg == null) ? null : maxKeysArg.longValue(), resultCallback);
            }
            catch (Error | RuntimeException exception) {
              ArrayList<Object> wrappedError = wrapError(exception);
              reply.reply(wrappedError);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.CosServiceApi.putBucket", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            ArrayList wrapped = new ArrayList<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              assert args != null;
              String serviceKeyArg = (String)args.get(0);
              if (serviceKeyArg == null) {
                throw new NullPointerException("serviceKeyArg unexpectedly null.");
              }
              String bucketArg = (String)args.get(1);
              if (bucketArg == null) {
                throw new NullPointerException("bucketArg unexpectedly null.");
              }
              String regionArg = (String)args.get(2);
              Boolean enableMAZArg = (Boolean)args.get(3);
              String cosaclArg = (String)args.get(4);
              String readAccountArg = (String)args.get(5);
              String writeAccountArg = (String)args.get(6);
              String readWriteAccountArg = (String)args.get(7);
              Result<Void> resultCallback = new Result<Void>() {
                public void success(Void result) {
                  wrapped.add(0, null);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  ArrayList<Object> wrappedError = wrapError(error);
                  reply.reply(wrappedError);
                }
              };

              api.putBucket(serviceKeyArg, bucketArg, regionArg, enableMAZArg, cosaclArg, readAccountArg, writeAccountArg, readWriteAccountArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              ArrayList<Object> wrappedError = wrapError(exception);
              reply.reply(wrappedError);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.CosServiceApi.headBucket", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            ArrayList wrapped = new ArrayList<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              assert args != null;
              String serviceKeyArg = (String)args.get(0);
              if (serviceKeyArg == null) {
                throw new NullPointerException("serviceKeyArg unexpectedly null.");
              }
              String bucketArg = (String)args.get(1);
              if (bucketArg == null) {
                throw new NullPointerException("bucketArg unexpectedly null.");
              }
              String regionArg = (String)args.get(2);
              Result<Map<String, String>> resultCallback = new Result<Map<String, String>>() {
                public void success(Map<String, String> result) {
                  wrapped.add(0, result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  ArrayList<Object> wrappedError = wrapError(error);
                  reply.reply(wrappedError);
                }
              };

              api.headBucket(serviceKeyArg, bucketArg, regionArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              ArrayList<Object> wrappedError = wrapError(exception);
              reply.reply(wrappedError);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.CosServiceApi.deleteBucket", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            ArrayList wrapped = new ArrayList<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              assert args != null;
              String serviceKeyArg = (String)args.get(0);
              if (serviceKeyArg == null) {
                throw new NullPointerException("serviceKeyArg unexpectedly null.");
              }
              String bucketArg = (String)args.get(1);
              if (bucketArg == null) {
                throw new NullPointerException("bucketArg unexpectedly null.");
              }
              String regionArg = (String)args.get(2);
              Result<Void> resultCallback = new Result<Void>() {
                public void success(Void result) {
                  wrapped.add(0, null);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  ArrayList<Object> wrappedError = wrapError(error);
                  reply.reply(wrappedError);
                }
              };

              api.deleteBucket(serviceKeyArg, bucketArg, regionArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              ArrayList<Object> wrappedError = wrapError(exception);
              reply.reply(wrappedError);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.CosServiceApi.getBucketAccelerate", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            ArrayList wrapped = new ArrayList<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              assert args != null;
              String serviceKeyArg = (String)args.get(0);
              if (serviceKeyArg == null) {
                throw new NullPointerException("serviceKeyArg unexpectedly null.");
              }
              String bucketArg = (String)args.get(1);
              if (bucketArg == null) {
                throw new NullPointerException("bucketArg unexpectedly null.");
              }
              String regionArg = (String)args.get(2);
              Result<Boolean> resultCallback = new Result<Boolean>() {
                public void success(Boolean result) {
                  wrapped.add(0, result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  ArrayList<Object> wrappedError = wrapError(error);
                  reply.reply(wrappedError);
                }
              };

              api.getBucketAccelerate(serviceKeyArg, bucketArg, regionArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              ArrayList<Object> wrappedError = wrapError(exception);
              reply.reply(wrappedError);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.CosServiceApi.putBucketAccelerate", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            ArrayList wrapped = new ArrayList<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              assert args != null;
              String serviceKeyArg = (String)args.get(0);
              if (serviceKeyArg == null) {
                throw new NullPointerException("serviceKeyArg unexpectedly null.");
              }
              String bucketArg = (String)args.get(1);
              if (bucketArg == null) {
                throw new NullPointerException("bucketArg unexpectedly null.");
              }
              String regionArg = (String)args.get(2);
              Boolean enableArg = (Boolean)args.get(3);
              if (enableArg == null) {
                throw new NullPointerException("enableArg unexpectedly null.");
              }
              Result<Void> resultCallback = new Result<Void>() {
                public void success(Void result) {
                  wrapped.add(0, null);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  ArrayList<Object> wrappedError = wrapError(error);
                  reply.reply(wrappedError);
                }
              };

              api.putBucketAccelerate(serviceKeyArg, bucketArg, regionArg, enableArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              ArrayList<Object> wrappedError = wrapError(exception);
              reply.reply(wrappedError);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.CosServiceApi.getBucketLocation", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            ArrayList wrapped = new ArrayList<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              assert args != null;
              String serviceKeyArg = (String)args.get(0);
              if (serviceKeyArg == null) {
                throw new NullPointerException("serviceKeyArg unexpectedly null.");
              }
              String bucketArg = (String)args.get(1);
              if (bucketArg == null) {
                throw new NullPointerException("bucketArg unexpectedly null.");
              }
              String regionArg = (String)args.get(2);
              Result<String> resultCallback = new Result<String>() {
                public void success(String result) {
                  wrapped.add(0, result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  ArrayList<Object> wrappedError = wrapError(error);
                  reply.reply(wrappedError);
                }
              };

              api.getBucketLocation(serviceKeyArg, bucketArg, regionArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              ArrayList<Object> wrappedError = wrapError(exception);
              reply.reply(wrappedError);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.CosServiceApi.getBucketVersioning", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            ArrayList wrapped = new ArrayList<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              assert args != null;
              String serviceKeyArg = (String)args.get(0);
              if (serviceKeyArg == null) {
                throw new NullPointerException("serviceKeyArg unexpectedly null.");
              }
              String bucketArg = (String)args.get(1);
              if (bucketArg == null) {
                throw new NullPointerException("bucketArg unexpectedly null.");
              }
              String regionArg = (String)args.get(2);
              Result<Boolean> resultCallback = new Result<Boolean>() {
                public void success(Boolean result) {
                  wrapped.add(0, result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  ArrayList<Object> wrappedError = wrapError(error);
                  reply.reply(wrappedError);
                }
              };

              api.getBucketVersioning(serviceKeyArg, bucketArg, regionArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              ArrayList<Object> wrappedError = wrapError(exception);
              reply.reply(wrappedError);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.CosServiceApi.putBucketVersioning", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            ArrayList wrapped = new ArrayList<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              assert args != null;
              String serviceKeyArg = (String)args.get(0);
              if (serviceKeyArg == null) {
                throw new NullPointerException("serviceKeyArg unexpectedly null.");
              }
              String bucketArg = (String)args.get(1);
              if (bucketArg == null) {
                throw new NullPointerException("bucketArg unexpectedly null.");
              }
              String regionArg = (String)args.get(2);
              Boolean enableArg = (Boolean)args.get(3);
              if (enableArg == null) {
                throw new NullPointerException("enableArg unexpectedly null.");
              }
              Result<Void> resultCallback = new Result<Void>() {
                public void success(Void result) {
                  wrapped.add(0, null);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  ArrayList<Object> wrappedError = wrapError(error);
                  reply.reply(wrappedError);
                }
              };

              api.putBucketVersioning(serviceKeyArg, bucketArg, regionArg, enableArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              ArrayList<Object> wrappedError = wrapError(exception);
              reply.reply(wrappedError);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.CosServiceApi.doesBucketExist", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            ArrayList wrapped = new ArrayList<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              assert args != null;
              String serviceKeyArg = (String)args.get(0);
              if (serviceKeyArg == null) {
                throw new NullPointerException("serviceKeyArg unexpectedly null.");
              }
              String bucketArg = (String)args.get(1);
              if (bucketArg == null) {
                throw new NullPointerException("bucketArg unexpectedly null.");
              }
              Result<Boolean> resultCallback = new Result<Boolean>() {
                public void success(Boolean result) {
                  wrapped.add(0, result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  ArrayList<Object> wrappedError = wrapError(error);
                  reply.reply(wrappedError);
                }
              };

              api.doesBucketExist(serviceKeyArg, bucketArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              ArrayList<Object> wrappedError = wrapError(exception);
              reply.reply(wrappedError);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.CosServiceApi.doesObjectExist", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            ArrayList wrapped = new ArrayList<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              assert args != null;
              String serviceKeyArg = (String)args.get(0);
              if (serviceKeyArg == null) {
                throw new NullPointerException("serviceKeyArg unexpectedly null.");
              }
              String bucketArg = (String)args.get(1);
              if (bucketArg == null) {
                throw new NullPointerException("bucketArg unexpectedly null.");
              }
              String cosPathArg = (String)args.get(2);
              if (cosPathArg == null) {
                throw new NullPointerException("cosPathArg unexpectedly null.");
              }
              Result<Boolean> resultCallback = new Result<Boolean>() {
                public void success(Boolean result) {
                  wrapped.add(0, result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  ArrayList<Object> wrappedError = wrapError(error);
                  reply.reply(wrappedError);
                }
              };

              api.doesObjectExist(serviceKeyArg, bucketArg, cosPathArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              ArrayList<Object> wrappedError = wrapError(exception);
              reply.reply(wrappedError);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.CosServiceApi.cancelAll", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            ArrayList wrapped = new ArrayList<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              assert args != null;
              String serviceKeyArg = (String)args.get(0);
              if (serviceKeyArg == null) {
                throw new NullPointerException("serviceKeyArg unexpectedly null.");
              }
              api.cancelAll(serviceKeyArg);
              wrapped.add(0, null);
            }
            catch (Error | RuntimeException exception) {
              ArrayList<Object> wrappedError = wrapError(exception);
              wrapped = wrappedError;
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
  /** Generated interface from Pigeon that represents a handler of messages from Flutter. */
  public interface CosTransferApi {
    @NonNull String upload(@NonNull String transferKey, @NonNull String bucket, @NonNull String cosPath, @Nullable String region, @Nullable String filePath, @Nullable byte[] byteArr, @Nullable String uploadId, @Nullable String stroageClass, @Nullable Long trafficLimit, @Nullable String callbackParam, @Nullable Map<String, String> customHeaders, @Nullable List<String> noSignHeaders, @Nullable Long resultCallbackKey, @Nullable Long stateCallbackKey, @Nullable Long progressCallbackKey, @Nullable Long initMultipleUploadCallbackKey);
    @NonNull String download(@NonNull String transferKey, @NonNull String bucket, @NonNull String cosPath, @Nullable String region, @NonNull String savePath, @Nullable String versionId, @Nullable Long trafficLimit, @Nullable Map<String, String> customHeaders, @Nullable List<String> noSignHeaders, @Nullable Long resultCallbackKey, @Nullable Long stateCallbackKey, @Nullable Long progressCallbackKey);
    void pause(@NonNull String taskId, @NonNull String transferKey);
    void resume(@NonNull String taskId, @NonNull String transferKey);
    void cancel(@NonNull String taskId, @NonNull String transferKey);

    /** The codec used by CosTransferApi. */
    static MessageCodec<Object> getCodec() {
      return       new StandardMessageCodec();    }
    /**Sets up an instance of `CosTransferApi` to handle messages through the `binaryMessenger`. */
    static void setup(BinaryMessenger binaryMessenger, CosTransferApi api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.CosTransferApi.upload", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            ArrayList wrapped = new ArrayList<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              assert args != null;
              String transferKeyArg = (String)args.get(0);
              if (transferKeyArg == null) {
                throw new NullPointerException("transferKeyArg unexpectedly null.");
              }
              String bucketArg = (String)args.get(1);
              if (bucketArg == null) {
                throw new NullPointerException("bucketArg unexpectedly null.");
              }
              String cosPathArg = (String)args.get(2);
              if (cosPathArg == null) {
                throw new NullPointerException("cosPathArg unexpectedly null.");
              }
              String regionArg = (String)args.get(3);
              String filePathArg = (String)args.get(4);
              byte[] byteArrArg = (byte[])args.get(5);
              String uploadIdArg = (String)args.get(6);
              String stroageClassArg = (String)args.get(7);
              Number trafficLimitArg = (Number)args.get(8);
              String callbackParamArg = (String)args.get(9);
              Map<String, String> customHeadersArg = (Map<String, String>)args.get(10);
              List<String> noSignHeadersArg = (List<String>)args.get(11);
              Number resultCallbackKeyArg = (Number)args.get(12);
              Number stateCallbackKeyArg = (Number)args.get(13);
              Number progressCallbackKeyArg = (Number)args.get(14);
              Number initMultipleUploadCallbackKeyArg = (Number)args.get(15);
              String output = api.upload(transferKeyArg, bucketArg, cosPathArg, regionArg, filePathArg, byteArrArg, uploadIdArg, stroageClassArg, (trafficLimitArg == null) ? null : trafficLimitArg.longValue(), callbackParamArg, customHeadersArg, noSignHeadersArg, (resultCallbackKeyArg == null) ? null : resultCallbackKeyArg.longValue(), (stateCallbackKeyArg == null) ? null : stateCallbackKeyArg.longValue(), (progressCallbackKeyArg == null) ? null : progressCallbackKeyArg.longValue(), (initMultipleUploadCallbackKeyArg == null) ? null : initMultipleUploadCallbackKeyArg.longValue());
              wrapped.add(0, output);
            }
            catch (Error | RuntimeException exception) {
              ArrayList<Object> wrappedError = wrapError(exception);
              wrapped = wrappedError;
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.CosTransferApi.download", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            ArrayList wrapped = new ArrayList<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              assert args != null;
              String transferKeyArg = (String)args.get(0);
              if (transferKeyArg == null) {
                throw new NullPointerException("transferKeyArg unexpectedly null.");
              }
              String bucketArg = (String)args.get(1);
              if (bucketArg == null) {
                throw new NullPointerException("bucketArg unexpectedly null.");
              }
              String cosPathArg = (String)args.get(2);
              if (cosPathArg == null) {
                throw new NullPointerException("cosPathArg unexpectedly null.");
              }
              String regionArg = (String)args.get(3);
              String savePathArg = (String)args.get(4);
              if (savePathArg == null) {
                throw new NullPointerException("savePathArg unexpectedly null.");
              }
              String versionIdArg = (String)args.get(5);
              Number trafficLimitArg = (Number)args.get(6);
              Map<String, String> customHeadersArg = (Map<String, String>)args.get(7);
              List<String> noSignHeadersArg = (List<String>)args.get(8);
              Number resultCallbackKeyArg = (Number)args.get(9);
              Number stateCallbackKeyArg = (Number)args.get(10);
              Number progressCallbackKeyArg = (Number)args.get(11);
              String output = api.download(transferKeyArg, bucketArg, cosPathArg, regionArg, savePathArg, versionIdArg, (trafficLimitArg == null) ? null : trafficLimitArg.longValue(), customHeadersArg, noSignHeadersArg, (resultCallbackKeyArg == null) ? null : resultCallbackKeyArg.longValue(), (stateCallbackKeyArg == null) ? null : stateCallbackKeyArg.longValue(), (progressCallbackKeyArg == null) ? null : progressCallbackKeyArg.longValue());
              wrapped.add(0, output);
            }
            catch (Error | RuntimeException exception) {
              ArrayList<Object> wrappedError = wrapError(exception);
              wrapped = wrappedError;
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.CosTransferApi.pause", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            ArrayList wrapped = new ArrayList<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              assert args != null;
              String taskIdArg = (String)args.get(0);
              if (taskIdArg == null) {
                throw new NullPointerException("taskIdArg unexpectedly null.");
              }
              String transferKeyArg = (String)args.get(1);
              if (transferKeyArg == null) {
                throw new NullPointerException("transferKeyArg unexpectedly null.");
              }
              api.pause(taskIdArg, transferKeyArg);
              wrapped.add(0, null);
            }
            catch (Error | RuntimeException exception) {
              ArrayList<Object> wrappedError = wrapError(exception);
              wrapped = wrappedError;
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.CosTransferApi.resume", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            ArrayList wrapped = new ArrayList<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              assert args != null;
              String taskIdArg = (String)args.get(0);
              if (taskIdArg == null) {
                throw new NullPointerException("taskIdArg unexpectedly null.");
              }
              String transferKeyArg = (String)args.get(1);
              if (transferKeyArg == null) {
                throw new NullPointerException("transferKeyArg unexpectedly null.");
              }
              api.resume(taskIdArg, transferKeyArg);
              wrapped.add(0, null);
            }
            catch (Error | RuntimeException exception) {
              ArrayList<Object> wrappedError = wrapError(exception);
              wrapped = wrappedError;
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.CosTransferApi.cancel", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            ArrayList wrapped = new ArrayList<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              assert args != null;
              String taskIdArg = (String)args.get(0);
              if (taskIdArg == null) {
                throw new NullPointerException("taskIdArg unexpectedly null.");
              }
              String transferKeyArg = (String)args.get(1);
              if (transferKeyArg == null) {
                throw new NullPointerException("transferKeyArg unexpectedly null.");
              }
              api.cancel(taskIdArg, transferKeyArg);
              wrapped.add(0, null);
            }
            catch (Error | RuntimeException exception) {
              ArrayList<Object> wrappedError = wrapError(exception);
              wrapped = wrappedError;
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
  private static class FlutterCosApiCodec extends StandardMessageCodec {
    public static final FlutterCosApiCodec INSTANCE = new FlutterCosApiCodec();
    private FlutterCosApiCodec() {}
    @Override
    protected Object readValueOfType(byte type, @NonNull ByteBuffer buffer) {
      switch (type) {
        case (byte)128:         
          return CallbackResult.fromList((ArrayList<Object>) readValue(buffer));
        
        case (byte)129:         
          return CallbackResultError.fromList((ArrayList<Object>) readValue(buffer));
        
        case (byte)130:         
          return CosXmlClientException.fromList((ArrayList<Object>) readValue(buffer));
        
        case (byte)131:         
          return CosXmlResult.fromList((ArrayList<Object>) readValue(buffer));
        
        case (byte)132:         
          return CosXmlServiceException.fromList((ArrayList<Object>) readValue(buffer));
        
        case (byte)133:         
          return LogEntity.fromList((ArrayList<Object>) readValue(buffer));
        
        case (byte)134:         
          return STSCredentialScope.fromList((ArrayList<Object>) readValue(buffer));
        
        case (byte)135:         
          return SessionQCloudCredentials.fromList((ArrayList<Object>) readValue(buffer));
        
        default:        
          return super.readValueOfType(type, buffer);
        
      }
    }
    @Override
    protected void writeValue(@NonNull ByteArrayOutputStream stream, Object value)     {
      if (value instanceof CallbackResult) {
        stream.write(128);
        writeValue(stream, ((CallbackResult) value).toList());
      } else 
      if (value instanceof CallbackResultError) {
        stream.write(129);
        writeValue(stream, ((CallbackResultError) value).toList());
      } else 
      if (value instanceof CosXmlClientException) {
        stream.write(130);
        writeValue(stream, ((CosXmlClientException) value).toList());
      } else 
      if (value instanceof CosXmlResult) {
        stream.write(131);
        writeValue(stream, ((CosXmlResult) value).toList());
      } else 
      if (value instanceof CosXmlServiceException) {
        stream.write(132);
        writeValue(stream, ((CosXmlServiceException) value).toList());
      } else 
      if (value instanceof LogEntity) {
        stream.write(133);
        writeValue(stream, ((LogEntity) value).toList());
      } else 
      if (value instanceof STSCredentialScope) {
        stream.write(134);
        writeValue(stream, ((STSCredentialScope) value).toList());
      } else 
      if (value instanceof SessionQCloudCredentials) {
        stream.write(135);
        writeValue(stream, ((SessionQCloudCredentials) value).toList());
      } else 
{
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated class from Pigeon that represents Flutter messages that can be called from Java. */
  public static class FlutterCosApi {
    private final BinaryMessenger binaryMessenger;
    public FlutterCosApi(BinaryMessenger argBinaryMessenger){
      this.binaryMessenger = argBinaryMessenger;
    }
    public interface Reply<T> {
      void reply(T reply);
    }
    /** The codec used by FlutterCosApi. */
    static MessageCodec<Object> getCodec() {
      return       FlutterCosApiCodec.INSTANCE;
    }
    public void fetchSessionCredentials(Reply<SessionQCloudCredentials> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.FlutterCosApi.fetchSessionCredentials", getCodec());
      channel.send(null, channelReply -> {
        @SuppressWarnings("ConstantConditions")
        SessionQCloudCredentials output = (SessionQCloudCredentials)channelReply;
        callback.reply(output);
      });
    }
    public void fetchScopeLimitCredentials(@NonNull List<STSCredentialScope> stsCredentialScopesArg, Reply<SessionQCloudCredentials> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.FlutterCosApi.fetchScopeLimitCredentials", getCodec());
      channel.send(new ArrayList<Object>(Collections.singletonList(stsCredentialScopesArg)), channelReply -> {
        @SuppressWarnings("ConstantConditions")
        SessionQCloudCredentials output = (SessionQCloudCredentials)channelReply;
        callback.reply(output);
      });
    }
    /**
     * 获取dns记录
     * @param domain 域名
     * @return ip集合
     */
    public void fetchDns(@NonNull String domainArg, Reply<List<String>> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.FlutterCosApi.fetchDns", getCodec());
      channel.send(new ArrayList<Object>(Collections.singletonList(domainArg)), channelReply -> {
        @SuppressWarnings("ConstantConditions")
        List<String> output = (List<String>)channelReply;
        callback.reply(output);
      });
    }
    public void resultSuccessCallback(@NonNull String transferKeyArg, @NonNull Long keyArg, @Nullable Map<String, String> headerArg, @Nullable CosXmlResult resultArg, Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.FlutterCosApi.resultSuccessCallback", getCodec());
      channel.send(new ArrayList<Object>(Arrays.asList(transferKeyArg, keyArg, headerArg, resultArg)), channelReply -> {
        callback.reply(null);
      });
    }
    public void resultFailCallback(@NonNull String transferKeyArg, @NonNull Long keyArg, @Nullable CosXmlClientException clientExceptionArg, @Nullable CosXmlServiceException serviceExceptionArg, Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.FlutterCosApi.resultFailCallback", getCodec());
      channel.send(new ArrayList<Object>(Arrays.asList(transferKeyArg, keyArg, clientExceptionArg, serviceExceptionArg)), channelReply -> {
        callback.reply(null);
      });
    }
    public void stateCallback(@NonNull String transferKeyArg, @NonNull Long keyArg, @NonNull String stateArg, Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.FlutterCosApi.stateCallback", getCodec());
      channel.send(new ArrayList<Object>(Arrays.asList(transferKeyArg, keyArg, stateArg)), channelReply -> {
        callback.reply(null);
      });
    }
    public void progressCallback(@NonNull String transferKeyArg, @NonNull Long keyArg, @NonNull Long completeArg, @NonNull Long targetArg, Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.FlutterCosApi.progressCallback", getCodec());
      channel.send(new ArrayList<Object>(Arrays.asList(transferKeyArg, keyArg, completeArg, targetArg)), channelReply -> {
        callback.reply(null);
      });
    }
    public void initMultipleUploadCallback(@NonNull String transferKeyArg, @NonNull Long keyArg, @NonNull String bucketArg, @NonNull String cosKeyArg, @NonNull String uploadIdArg, Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.FlutterCosApi.initMultipleUploadCallback", getCodec());
      channel.send(new ArrayList<Object>(Arrays.asList(transferKeyArg, keyArg, bucketArg, cosKeyArg, uploadIdArg)), channelReply -> {
        callback.reply(null);
      });
    }
    public void onLog(@NonNull Long keyArg, @NonNull LogEntity entityArg, Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.FlutterCosApi.onLog", getCodec());
      channel.send(new ArrayList<Object>(Arrays.asList(keyArg, entityArg)), channelReply -> {
        callback.reply(null);
      });
    }
    public void fetchClsSessionCredentials(Reply<SessionQCloudCredentials> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.FlutterCosApi.fetchClsSessionCredentials", getCodec());
      channel.send(null, channelReply -> {
        @SuppressWarnings("ConstantConditions")
        SessionQCloudCredentials output = (SessionQCloudCredentials)channelReply;
        callback.reply(output);
      });
    }
  }
  @NonNull private static ArrayList<Object> wrapError(@NonNull Throwable exception) {
    ArrayList<Object> errorList = new ArrayList<>(3);
    errorList.add(exception.toString());
    errorList.add(exception.getClass().getSimpleName());
    errorList.add("Cause: " + exception.getCause() + ", Stacktrace: " + Log.getStackTraceString(exception));
    return errorList;
  }
}
